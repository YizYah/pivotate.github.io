{"addedCode":{"general":{"AuthTabs":{"beforeImports":" "},"DeleteInstanceMenu":{"beforeImports":"\n"},"EditInstanceForm":{"beforeImports":"\n","addedImports":"import { TextField, makeStyles } from '@material-ui/core';\n","styling":"const Button = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n  &:hover {\n    color: ${(props) => props.hoverColor || '#000000'};\n  }\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  titleLabel: {\n    fontSize: '.8rem',\n    textAlign: 'initial',\n  },\n  textArea: {\n    width: '90%',\n    backgroundColor: 'white',\n  },\n}));\n","beforeReturn":"  const styles = useStyles();\n  ","insideReturn":"      <label htmlFor={id}>\n        <TextField\n          className={styles.textArea}\n          label={label}\n          id={id}\n          type='text'\n          value={value}\n          onChange={onChange}\n          disabled={disabled}\n          variant='outlined'\n        />\n      </label>\n      <Button\n        type='button'\n        hoverColor='#00FF00'\n        onClick={onSave}\n        disabled={disabled}\n      >\n        &#10003;\n      </Button>\n      <Button\n        type='button'\n        hoverColor='#FF0000'\n        onClick={onCancel}\n        disabled={disabled}\n      >\n        &#10005;\n      </Button>\n      {/* "},"ResetPasswordForm":{"beforeImports":"\n"},"SendCodeForm":{"beforeImports":"\n"},"ForgotPasswordButton":{"beforeImports":"\n"},"LoginForm":{"beforeImports":"\n","addedImport":"\nimport TransitionsModal from '../../custom/Modal';\n\n","beforeReturn":"  const styles = useStyles();\n  ","insideReturn":"    <TransitionsModal open={open} onClose={onClose}>\n      <div>\n        <LogoContainer>\n          <a href='/'>\n            <img\n              src='https://pivotatestaticassets.com/images/Pivotate Logo.svg'\n              alt='Pivotate Logo'\n              width='170'\n            />\n          </a>\n        </LogoContainer>\n        <InputLabel className={styles.inputLabel}>Login</InputLabel>\n      </div>\n      <form onSubmit={handleSubmit}>\n        <Row>\n          <label htmlFor='nostack-username'>\n            <TextField\n              className={styles.textField}\n              id='nostack-username'\n              type='text'\n              name='username'\n              label='Username'\n              disabled={isSubmitting}\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              variant='outlined'\n            />\n          </label>\n        </Row>\n        <Row>\n          <label htmlFor='nostack-password'>\n            <TextField\n              className={styles.textField}\n              id='nostack-password'\n              label='Password'\n              type='password'\n              name='password'\n              disabled={isSubmitting}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              variant='outlined'\n            />\n          </label>\n        </Row>\n        <Row>\n          <Button\n            className={styles.button}\n            type='submit'\n            disabled={isSubmitting || !username || !password}\n            variant='contained'\n            color='primary'\n          >\n            Log In\n          </Button>\n        </Row>\n        {error && <Row>{error}</Row>}\n      </form>\n      <Row>\n        <ForgotPasswordButton />\n      </Row>\n    </TransitionsModal>\n    "},"NavBar":{"beforeImports":"\n"},"RegistrationField":{"beforeImports":"\n"},"RegistrationFormStyle":{"beforeImports":"\n"},"RegistrationForm":{"beforeImports":"\n"}},"appSpec":{"App":{"beforeImports":" ","addedImports":"import { Container } from '@material-ui/core';\nimport AppTitleAccordion from '../../../custom/AppTitleAccordion';\n","styling":"  margin: 2em 1em;\n  padding: 1.5em;\n  \n  border-radius: 10px;\n  \n  background-color: ${\n    (isDeleting && 'tomato') || (selected && 'white') || '#D2ECEF'\n  };\n  cursor: ${selected ? 'auto' : 'pointer'};\n  ","buttonStyling":"  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n  &:hover {\n    color: ${(props) => props.hoverColor || '#000000'};\n  }\n  ","beforeFunction":"\nAppStyleWrapper.defaultProps = {\n  'data-id': 'App__wrapper',\n};\n\nButton.defaultProps = {\n  'data-id': 'App__button',\n};\n","addedProps":"  ","beginning":"  ","beforeReturn":"  ","renderEnding":"      ","addedPropTypes":"  "},"AppCreationForm":{"beforeImports":"\n","addedImports":" ","styling":"  // change styling here\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  background-color: #f5f5f5;\n  ","buttonStyling":"  margin-left: 1em;\n  ","beforeFunction":" ","addedProps":"  ","beginning":"  ","beforeReturn":"  ","addedPropTypes":"  "},"Apps":{"beforeImports":"// 'use strict';\n","addedImports":"import FirstTimeAppCreationForm from '../../../custom/FirstTimeAppCreationForm';\nimport { Context as UnitDataContext } from '../../../custom/UnitDataContext';\nimport { Container } from '@material-ui/core';\n","styling":"  // add a prop called \\`show\\`\n  padding-top: 5rem;\n  padding-bottom: 5rem;\n  // display: flex;\n  // flex-wrap: wrap;\n  // justify-content: space-evenly;\n  // mystyling...\n  ","beforeFunction":" ","beginning":"  // eslint-disable-next-line react/static-property-placement\n  static contextType = UnitDataContext;\n\n  ","addedState":"    ","componentDidMount":"\n    ","componentWillUnmount":"    ","beforeRender":"  ","renderBeginning":"    ","beforeReturn":"          /* NOTE: one app is assumed here. */\n          // const appSpec = apps[0];\n\n          // const descriptionInfo = getDescriptionChild(appSpec.children);\n          // const descriptionValue = descriptionInfo.instances[0].value;\n\n          // ns__custom_start unit: appSpec, comp: Apps, loc: beforeReturn\n          const noApp =\n            apps.length === 0 || !(apps[0].value && apps[0].value !== ''); // || descriptionValue); // &&\n          // find in apps[0].children array an object o where o.typeId === TYPE_DESCRIPTION_ID\n          // and where o.instances contains an object oi where oi.value && oi.value !== ''\n          // const show = !noApp;\n          ","addedPropsForCreationForm":"                  ","addedPropsForChildren":"                        ","renderEnding":"              ","addedPropTypes":"  "},"Description":{"beforeImports":" ","addedImports":" ","styling":"  // add styling here\n  margin: 2em 1em;\n  padding: 1.5em;\n  border: ${selected ? '1px solid aquamarine' : '1px solid white'};\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px #888888;\n  background-color: ${isDeleting && 'tomato'};\n  cursor: ${selected ? 'auto' : 'pointer'};\n\n  &:hover {\n    border: 1px solid aquamarine;\n  }\n  ","buttonStyling":"  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n  &:hover {\n    color: ${(props) => props.hoverColor || '#000000'};\n  }\n  ","beforeFunction":" ","addedProps":"  ","beginning":"  ","beforeReturn":"  ","renderEnding":"      ","addedPropTypes":"  "},"DescriptionCreationForm":{"beforeImports":"\n","addedImports":"\nimport { makeStyles, TextField } from '@material-ui/core';\n","styling":"  // change styling here\n  margin: 2em;\n  padding: 1.5em;\n  border: none;\n  border-radius: 5px;\n  ","beforeFunction":"const Label = styled.label`\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  width: 100%;\n`;\n\nconst useStyles = makeStyles({\n  button: {\n    minWidth: 0,\n  },\n  customWidth: {\n    maxWidth: '500',\n    minWidth: '300',\n    backgroundColor: 'blue',\n  },\n  helpIcon: {\n    fontSize: '1.5rem',\n    color: '#FDCC00',\n  },\n  closeIcon: {\n    color: 'white',\n    fontSize: '1.2rem',\n  },\n  textField: {\n    width: '100%',\n  },\n});\n\n","addedProps":"  ","beginning":"  const styles = useStyles();\n\n  ","beforeReturn":"  // const showCallout = () => {\n  //   setCallout(!callout);\n  // };\n  ","addedPropTypes":"  "},"Descriptions":{"beforeImports":" ","addedImports":" ","styling":"  ","beforeFunction":" ","beginning":"  ","addedState":"    ","componentDidMount":"    ","componentWillUnmount":"    ","beforeRender":"  ","renderBeginning":"    ","addedPropsForCreationForm":"          ","addedPropsForChildren":"            ","renderEnding":"        ","addedPropTypes":"  "},"InfoType":{"beforeImports":"\n","addedImports":"// <!-- prettier-ignore-start -->\nimport { useEffect } from 'react';\nimport { InputLabel, makeStyles } from '@material-ui/core';\n\nimport getChildData from '../../../custom/getChildData';\nimport SubInfoComponent from '../../../custom/SubInfoTypesRecursive';\n// <!-- prettier-ignore-end -->\n","styling":"  // add styling here\n  margin: 2rem 0 .5rem 1rem;\n  padding: ${selected ? '0' : '1.5rem'};\n  \n  border-radius: 10px;\n  \n  background-color: ${\n    (isDeleting && 'tomato') || (selected && 'white') || '#D2ECEF'\n  };\n  cursor: ${selected ? 'auto' : 'pointer'};\n  position: relative;\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: -2rem;\n    left: -2rem;\n    border-left: 2px dashed #a2a5b5;\n    width: 1px;\n    height: ${(selected && '116%') || '140%'}; \n  }\n\n \n  &:after {\n    content: \"\";\n    position: absolute;\n    border-top: 2px dashed #a2a5b5;\n    top: ${(selected && '62px') || '37px'};\n    left: -30px;\n    width: ${(selected && '30px') || '29px'}; \n  }\n\n  &:last-child:before {\n    top: -32px ;\n    height: ${(selected && '94px') || '71px'}; \n  }\n  ","buttonStyling":"  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n  &:hover {\n    color: ${(props) => props.hoverColor || '#000000'};\n  }\n  ","beforeFunction":"const TitleWrapper = styled.div`\n  background: #d2ecef;\n  padding: 25px;\n  border-radius: 10px;\n  text-align: initial;\n  text-transfor: capitalize;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst useStyles = makeStyles(() => ({\n  titleLabel: {\n    fontSize: '.8rem',\n    textAlign: 'initial',\n  },\n}));\n","addedProps":"  childState,\n  ","beginning":"  const [parentState, setParentState] = useState([]);\n  const [selectSubInfoId, setSubInfoId] = useState(null);\n  useEffect(() => {\n    const [parentData] = getChildData(childState);\n    setParentState(parentData);\n  }, [infoType]);\n  const handleSelect = (id) => setSubInfoId(id);\n  const styles = useStyles();\n  ","beforeReturn":"  ","renderEnding":"      <SubInfoComponent\n        infoType={parentState}\n        instanceId={infoType.id}\n        parentId={parentId}\n        refetchQueries={refetchQueries}\n        onSelect={handleSelect}\n        selectSubInfoId={selectSubInfoId}\n        label={infoTypeValue}\n      />\n\n      {/* <SubInfoTypes\n        subInfoTypes={infoType._children}\n        infoTypeId={infoType.id}\n        refetchQueries={refetchQueries}\n        label='Sub Info Type'\n        hasParentId={hasParentId}\n        parentId={parentId}\n        childState={childState}\n      /> */}\n\n      ","addedPropTypes":"  "},"InfoTypeCreationForm":{"beforeImports":"\n","addedImports":"// <!-- prettier-ignore-start -->\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles, TextField, InputAdornment } from '@material-ui/core';\nimport { keyframes } from 'styled-components';\n// <!-- prettier-ignore-end -->\n","styling":"  // change styling here\n  margin: 0.8rem 0 0 11%;\n  border: none;\n  border-radius: 5px;\n  ","buttonStyling":"     ","beforeFunction":"const Label = styled.label`\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  width: 100%;\n`;\n\nconst fadeInDown = keyframes`\n  0% {\n    opacity: 0;\n    \n  }\n  100% {\n    opacity: 1;\n    \n  }\n`;\n\nconst CalloutBox = styled.div`\n  padding: 1rem;\n  animation: ${fadeInDown} 1.5s;\n  background-color: #F3E196;\n  width: inherit;\n  border-radius: 10px;  \n  position: relative;\n  margin: .5rem;\n  display: flex;\n  justify-content: space-between;\n  \n\n  :after{\n    background-color: #F3E196;\n    position: absolute;\n    width: 30px;\n    height: 10px;\n    border-top: 0px solid #F3E196;\n    border-right: 2px solid #F3E196;\n    border-left: 0px solid #F3E196;\n    border-bottom: 2px solid #F3E196;\n    left: 91%;\n    \n    content: '';\n    transform: rotate(45deg);\n    margin-top: -13px;\n    }\n  }\n`;\n\nconst useStyles = makeStyles({\n  button: {\n    minWidth: 0,\n  },\n  customWidth: {\n    maxWidth: '500',\n    minWidth: '300',\n    backgroundColor: 'blue',\n  },\n  helpIcon: {\n    fontSize: '1.5rem',\n    color: '#FDCC00',\n  },\n  closeIcon: {\n    color: 'white',\n    fontSize: '1rem',\n  },\n  textField: {\n    width: '100%',\n  },\n});\n","addedProps":"  validateInfoTypes,\n  label,\n  disabled,\n  infoTypeValueCount,\n  textLabel,\n  onChange,\n  ","beginning":"  const styles = useStyles();\n  const [callout, setCallout] = useState(false);\n  const showCalloutBox = callout || validateInfoTypes === 0;\n  let callOutText = '';\n\n  if (infoTypeValueCount < 5) {\n    callOutText = textLabel;\n  } else {\n    callOutText = `What is the Info Type ${label ? `for ${label}` : ''}`;\n  }\n  ","beforeReturn":"  const showCallout = () => {\n    setCallout(!callout);\n  };\n  ","addedPropTypes":"  "},"InfoTypes":{"beforeImports":" ","addedImports":"import getChildData from '../../../custom/getChildData';\nimport { Context as UnitDataContext } from '../../../custom/UnitDataContext';\nimport SubInfoTypeCreationForm from '../../../custom/SubInfoTypeCreationForm';\n\n","styling":"  margin: 0 0 0 7%;\n  ","beforeFunction":" ","beginning":"  // eslint-disable-next-line react/static-property-placement\n  static contextType = UnitDataContext;\n\n  ","addedState":"    childState: [],\n    parentState: [],\n    subInfoTypeValueCount: 0,\n    ","componentDidMount":"    const { childState, parentState } = this.state;\n    const { infoTypes } = this.props;\n\n    if (!childState.length || !parentState.length) {\n      const [parentData, childData] = getChildData(infoTypes);\n\n      this.setState({\n        childState: childData,\n        parentState: parentData,\n        subInfoTypeValueCount: 0,\n      });\n    }\n    ","componentWillUnmount":"    ","beforeRender":"  onChangeHelper = (value) => {\n    this.setState({ subInfoTypeValueCount: value.length });\n  };\n\n  ","renderBeginning":"    const { label } = this.props;\n    const validateInfoTypes = infoTypes.length;\n    const { childState, parentState, subInfoTypeValueCount } = this.state;\n    // const [data] = getChildData(parentState);\n    ","addedPropsForChildren":"                hasParentId={infoType.parentId}\n                childState={childState}\n                onChange={this.onChangeHelper}\n                ","renderEnding":"          ","addedPropTypes":"  "},"Screen":{"beforeImports":" ","addedImports":"// <!-- prettier-ignore-start -->\nimport { InputLabel, makeStyles } from '@material-ui/core';\n// <!-- prettier-ignore-end -->\n","styling":"  // add styling here\n  margin: 2rem 0 .5rem 1rem;\n  padding: ${selected ? '0' : '1.5rem'};\n  \n  border-radius: 10px;\n  \n  background-color: ${\n    (isDeleting && 'tomato') || (selected && 'white') || '#D2ECEF'\n  };\n  cursor: ${selected ? 'auto' : 'pointer'};\n  position: relative;\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: -31px;\n    left: -31px;\n    border-left: 2px dashed #a2a5b5;\n    width: 1px;\n    height: ${(selected && '109%') || '141%'}; \n   \n  }\n\n \n  &:after {\n    content: \"\";\n    position: absolute;\n    border-top: 2px dashed #a2a5b5;\n    top: ${(selected && '57px') || '44px'};\n    left: -30px;\n    width: ${(selected && '30px') || '29px'}; \n  }\n\n  &:last-child:before {\n    top: -33px ;\n    height: ${(selected && '90px') || '77px'}; \n  }\n  ","buttonStyling":"  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n  &:hover {\n    color: ${(props) => props.hoverColor || '#000000'};\n  }\n  ","beforeFunction":"\nconst TitleWrapper = styled.div`\n  background: #d2ecef;\n  padding: 25px;\n  border-radius: 10px;\n  text-align: initial;\n  text-transfor: capitalize;\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  titleLabel: {\n    fontSize: '.8rem',\n    textAlign: 'initial',\n  },\n}));\n","addedProps":"  ","beginning":"  const styles = useStyles();\n  ","beforeReturn":"  ","renderEnding":"      ","addedPropTypes":"  "},"ScreenCreationForm":{"beforeImports":" ","addedImports":"// <!-- prettier-ignore-start -->\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles, TextField, InputAdornment } from '@material-ui/core';\nimport { keyframes } from 'styled-components';\n// <!-- prettier-ignore-end -->\n","styling":"  margin: 0.8rem 0 0.5rem 3.8rem;\n  border: none;\n  border-radius: 5px;\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: -31px;\n    left: -31px;\n    border-left: 2px dashed #a2a5b5;\n    width: 1px;\n    height: '141%';\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    border-top: 2px dashed #a2a5b5;\n    top: '44px';\n    left: -30px;\n    width: '29px';\n  }\n\n  &:last-child:before {\n    top: -76px;\n    height: '116px';\n  }\n  ","beforeFunction":"const Label = styled.label`\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  width: 100%;\n`;\n\nconst fadeInDown = keyframes`\n  0% {\n    opacity: 0;\n    \n  }\n  100% {\n    opacity: 1;\n    \n  }\n`;\n\nconst CalloutBox = styled.div`\n  padding: 1rem;\n  animation: ${fadeInDown} 1.5s;\n  background-color: #F3E196;\n  width: inherit;\n  border-radius: 10px;  \n  position: relative;\n  margin: .5rem;\n  display: flex;\n  justify-content: space-between;\n  \n\n  :after{\n    background-color: #F3E196;\n    position: absolute;\n    width: 30px;\n    height: 10px;\n    border-top: 0px solid #F3E196;\n    border-right: 2px solid #F3E196;\n    border-left: 0px solid #F3E196;\n    border-bottom: 2px solid #F3E196;\n    left: 93%;\n    \n    content: '';\n    transform: rotate(45deg);\n    margin-top: -13px;\n    }\n  }\n`;\n\nconst useStyles = makeStyles({\n  button: {\n    minWidth: 0,\n  },\n  customWidth: {\n    maxWidth: '500',\n    minWidth: '300',\n    backgroundColor: 'blue',\n  },\n  helpIcon: {\n    fontSize: '1.5rem',\n    color: '#FDCC00',\n  },\n  closeIcon: {\n    color: 'white',\n    fontSize: '1rem',\n  },\n  textField: {\n    width: '100%',\n  },\n});\n","addedProps":"  validateScreens,\n  disabled,\n  onChange,\n  label,\n  userTypeCreationCount,\n  textLabel,\n\n  ","beginning":"  const styles = useStyles();\n  const [callout, setCallout] = useState(false);\n  const showCalloutBox = callout || validateScreens === 0;\n  let callOutText = '';\n\n  if (userTypeCreationCount < 5) {\n    callOutText = textLabel;\n  } else {\n    callOutText = `What is the Screen name ${label ? `for ${label}` : ''}`;\n  }\n  ","beforeReturn":"  const showCallout = () => {\n    setCallout(!callout);\n  };\n  return (\n    <Form>\n      <Label htmlFor='screen-value'>\n        <TextField\n          className={styles.textField}\n          label={callOutText}\n          value={screenValue}\n          onChange={(e) => {\n            handleChange(e);\n            onChange(e.target.value);\n          }}\n          onKeyPress={handleKeyPress}\n          disabled={disabled || loading}\n          variant='outlined'\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position='end'>\n                <HelpOutlineIcon\n                  className={styles.helpIcon}\n                  onClick={showCallout}\n                />\n              </InputAdornment>\n            ),\n          }}\n        />\n      </Label>\n      {showCalloutBox ? (\n        <CalloutBox>\n          {callOutText}\n          <CloseIcon className={styles.closeIcon} onClick={showCallout} />\n        </CalloutBox>\n      ) : null}\n    </Form>\n  );\n  ","addedPropTypes":"  "},"UserTypeCreationForm":{"insideHandleKeyPress":"    // if (e.charCode === 13) {\n    //   handleSubmit(e);\n    // }\n    if (e.key === 'Enter') {\n      handleSubmit(e);\n    }\n    ","beforeImports":" ","addedImports":"// <!-- prettier-ignore-start -->\nimport { keyframes } from 'styled-components';\nimport {  makeStyles } from '@material-ui/core';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { TextField, InputAdornment, Container } from '@material-ui/core';\n// <!-- prettier-ignore-end -->\n","styling":"  // change styling here\n  margin: 2em;\n  border: none;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  ","beforeFunction":"const Label = styled.label`\n  // display: flex;\n  // align-items: center;\n  // flex-direction: row;\n  // width: 100%;\n  margin-top: 1rem;\n`;\n\nconst fadeInDown = keyframes`\n0% {\n  opacity: 0;\n  \n}\n100% {\n  opacity: 1;\n  \n}\n`;\n\nconst CalloutBox = styled.div`\n  padding: 1rem;\n  animation: ${fadeInDown} 1.5s;\n  background-color: #F3E196;\n  width: 100%;\n  border-radius: 10px;  \n  position: relative;\n  margin: .5rem;\n  display: flex;\n  justify-content: space-between;\n  \n\n  :after{\n    background-color: #F3E196;\n    position: absolute;\n    width: 30px;\n    height: 10px;\n    border-top: 0px solid #F3E196;\n    border-right: 2px solid #F3E196;\n    border-left: 0px solid #F3E196;\n    border-bottom: 2px solid #F3E196;\n    left: 60%;\n    \n    content: '';\n    transform: rotate(45deg);\n    margin-top: -13px;\n    }\n  }\n`;\n\nconst useStyles = makeStyles({\n  button: {\n    minWidth: 0,\n  },\n  customWidth: {\n    maxWidth: '500',\n    minWidth: '300',\n    backgroundColor: 'blue',\n  },\n  helpIcon: {\n    fontSize: '1.5rem',\n    color: '#FDCC00',\n  },\n  closeIcon: {\n    color: 'white',\n    fontSize: '1.2rem',\n  },\n  textField: {\n    width: '100%',\n  },\n  customContainer: {\n    marginTop: '1rem'\n  }\n});\n","addedProps":"  validateUserTypes,\n  onChange,\n  label,\n  userTypeCreationCount,\n  disabled,\n  textLabel,\n  ","beginning":"  const styles = useStyles();\n  const [callout, setCallout] = useState(false);\n  const showCalloutBox = callout || validateUserTypes === 0;\n  let callOutText = '';\n  if (userTypeCreationCount < 4) {\n    callOutText = textLabel;\n  } else {\n    callOutText = `What is the User Type ${label ? `for ${label}` : ''}`;\n  }\n  ","beforeReturn":"  const showCallout = () => {\n    setCallout(!callout);\n  };\n  ","insideReturn":"      <Label htmlFor='userType-value'>\n        <TextField\n          className={styles.textField}\n          label={callOutText}\n          value={userTypeValue}\n          onChange={(e) => {\n            handleChange(e);\n            onChange(e.target.value);\n          }}\n          onKeyPress={handleKeyPress}\n          disabled={loading || disabled}\n          variant='outlined'\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position='end'>\n                <HelpOutlineIcon\n                  className={styles.helpIcon}\n                  onClick={showCallout}\n                />\n              </InputAdornment>\n            ),\n          }}\n        />\n      </Label>\n      {showCalloutBox ? (\n        <CalloutBox>\n          {callOutText}\n          <CloseIcon className={styles.closeIcon} onClick={showCallout} />\n        </CalloutBox>\n      ) : null}\n      ","addedPropTypes":"  "},"Screens":{"beforeImports":" ","addedImports":"// <!-- prettier-ignore-start -->\nimport InfoTypeCreationForm from '../InfoTypeCreationForm';\n// <!-- prettier-ignore-end -->\n","styling":"  margin: 0 0 0 7%;\n  ","beforeFunction":" ","beginning":"  ","addedState":"    infoTypeValueCount: 0,\n    ","componentDidMount":"    ","componentWillUnmount":"    ","beforeRender":"  onChangeHelper = (value) => {\n    this.setState({ infoTypeValueCount: value.length });\n  };\n  ","renderBeginning":"    const { label } = this.props;\n    const validateScreens = screens.length;\n    const { infoTypeValueCount } = this.state;\n    ","renderEnding":"          ","addedPropTypes":" "},"UserType":{"beforeImports":" ","addedImports":"// <!-- prettier-ignore-start -->\nimport { InputLabel, makeStyles } from '@material-ui/core';\n// <!-- prettier-ignore-end -->\n","styling":"  // add styling here\n  margin: 2rem 0 2rem 1rem;\n  \n  padding: ${selected ? '12px' : '1.5em'};\n  \n  border-radius: 10px;\n  border: 1px solid black;\n  background-color: ${\n    (isDeleting && 'tomato') || (selected && 'white') || '#D2ECEF'\n  };\n  cursor: ${selected ? 'auto' : 'pointer'};\n  position: relative;\n  width: inherit; \n\n  ","buttonStyling":"  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 1.25rem;\n  padding: 0;\n  color: #bbbbbb;\n  transition: color 0.5s ease;\n  &:hover {\n    color: ${(props) => props.hoverColor || '#000000'};\n  }\n  ","beforeFunction":"const TitleWrapper = styled.div`\n  background: #d2ecef;\n  padding: 25px;\n  border-radius: 10px;\n  text-align: initial;\n  text-transfor: capitalize;\n  margin-top: 8px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst useStyles = makeStyles((theme) => ({\n  titleLabel: {\n    fontSize: '.8rem',\n    textAlign: 'initial',\n  },\n}));\n\nUserTypeStyleWrapper.defaultProps = {\n  'data-id': 'userType__wrapper',\n};\n\nButton.defaultProps = {\n  'data-id': 'userType__button',\n};\n\nTitleWrapper.defaultProps = {\n  'data-id': 'userType__titleWrapper',\n};\n","addedProps":"  ","beginning":"\n  const styles = useStyles();\n  ","beforeReturn":"  ","renderEnding":"      ","addedPropTypes":"  "},"UserTypes":{"beforeImports":" ","addedImports":"// <!-- prettier-ignore-start -->\nimport ScreenCreationForm from '../ScreenCreationForm';\n// <!-- prettier-ignore-end -->\n","styling":"  padding-right: 0.5rem;\n  ","beforeFunction":"UserTypesStyleWrapper.defaultProps = {\n  'data-id': 'userTypes__wrapper',\n};\n","beginning":"  ","addedState":"    userTypeCreationCount: 0,\n    ","componentDidMount":"    ","componentWillUnmount":"    ","beforeRender":"  onChangeHelper = (value) => {\n    this.setState({ userTypeCreationCount: value.length });\n  };\n  ","renderBeginning":"    const { label } = this.props;\n    const validateUserTypes = userTypes.length;\n    const { userTypeCreationCount } = this.state;\n    ","renderEnding":"\n          ","addedPropTypes":"  "}}},"replacedCode":{"appSpec":{"App":{"isEdit":"  if (isEditMode) {\n    return (\n      <AppStyleWrapper>\n        <EditInstanceForm\n          id={app.id}\n          label={`What's the preferred title ${\n            appValue ? `for ${appValue}?` : `off you App?`\n          }`}\n          value={appValue}\n          onChange={handleAppValueChange}\n          onSave={handleAppValueSave}\n          onCancel={handleCancelEdit}\n          disabled={isSaving}\n        />\n      </AppStyleWrapper>\n    );\n  }\n  ","functionReturn":"  return (\n    <>\n      <AppTitleAccordion\n        title={appValue}\n        description={descriptions[0] && descriptions[0].value}\n        userTypes={userTypes}\n      />\n      <Button type='button' onClick={() => updateIsEditMode(true)}>\n        &#9998;\n      </Button>\n      <Button type='button' onClick={() => updateIsDeleteMode(true)}>\n        &#128465;\n      </Button>\n\n      <UserTypes\n        userTypes={userTypes}\n        appId={app.id}\n        label={appValue}\n        refetchQueries={refetchQueries}\n      />\n      {/* {!descriptions.length ? (\n        <Descriptions\n          descriptions={descriptions}\n          appId={app.id}\n          label={appValue}\n          refetchQueries={refetchQueries}\n        />\n      ) : null} */}\n\n      {/* ns__custom_start unit: appSpec, comp: App, loc: renderEnding */}\n      {/* ns__custom_end unit: appSpec, comp: App, loc: renderEnding */}\n    </>\n  );\n  "},"Apps":{"renderReturn":"\n    return (\n      <Unit\n        id={SOURCE_APP_SPEC_ID}\n        typeRelationships={APP_SPEC_RELATIONSHIPS}\n        query={SOURCE_APP_SPEC_QUERY}\n        parameters={parameters}\n      >\n        {({ loading, error, data, refetchQueries }) => {\n          if (loading) return 'Loading...';\n\n          if (error) {\n            return `Error: ${error.graphQLErrors}`;\n          }\n\n          const apps = data.unitData.map((el) => flattenData(el));\n\n          // ns__custom_start unit: appSpec, comp: Apps, loc: beforeReturn\n          /* NOTE: one app is assumed here. */\n          // const appSpec = apps[0];\n\n          // const descriptionInfo = getDescriptionChild(appSpec.children);\n          // const descriptionValue = descriptionInfo.instances[0].value;\n\n          // ns__custom_start unit: appSpec, comp: Apps, loc: beforeReturn\n          const noApp =\n            apps.length === 0 || !(apps[0].value && apps[0].value !== ''); // || descriptionValue); // &&\n          // find in apps[0].children array an object o where o.typeId === TYPE_DESCRIPTION_ID\n          // and where o.instances contains an object oi where oi.value && oi.value !== ''\n          // const show = !noApp;\n          // ns__custom_end unit: appSpec, comp: Apps, loc: beforeReturn\n\n          return (\n            <>\n            <Container maxWidth='sm'>\n            {noApp ? (\n                <FirstTimeAppCreationForm\n                  customerId={customerId}\n                  refetchQueries={refetchQueries}\n                  // ns__custom_start unit: appSpec, comp: Apps, loc: addedPropsForCreationForm\n                  // ns__custom_end unit: appSpec, comp: Apps, loc: addedPropsForCreationForm\n                />\n              ) : (\n                <AppsStyleWrapper\n                  ref={this.wrapperRef}\n                  onClick={this.handleClick}\n                  show\n                >\n                  <Container maxWidth='sm'>\n                  {apps &&\n                    apps.map((app) => (\n                      <App\n                        key={v4()}\n                        parentId={customerId}\n                        app={app}\n                        selected={app.id === selectedAppId}\n                        refetchQueries={refetchQueries}\n                        onSelect={this.handleSelect}\n                        // ns__custom_start unit: appSpec, comp: Apps, loc: addedPropsForChildren\n                        // ns__custom_end unit: appSpec, comp: Apps, loc: addedPropsForChildren\n                      />\n                    ))}\n\n                  </Container>\n                  {/* ns__start_section listElements */}\n                  \n                  {/* ns__end_section listElements */}\n                </AppsStyleWrapper>\n              )}\n\n              {/* ns__custom_start unit: appSpec, comp: Apps, loc: renderEnding */}\n              {/* ns__custom_end unit: appSpec, comp: Apps, loc: renderEnding */}\n\n            </Container>\n              \n            </>\n          );\n        }}\n      </Unit>\n    );\n\n    "},"DescriptionCreationForm":{"button":" ","handleKeyPress":"  function handleKeyPress(e) {\n    // if (e.charCode === 13) {\n    //   handleSubmit(e);\n    // }\n    if (e.key === 'Enter') {\n      handleSubmit(e);\n    }\n  }\n  ","return":"  return (\n    <Form>\n      <Label htmlFor='description-value'>\n        <TextField\n          className={styles.textField}\n          id='description-value'\n          type='text'\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={descriptionValue}\n          disabled={loading}\n          multiline\n          variant='outlined'\n          label='Description'\n          rows='10'\n          // InputProps={{\n          //   endAdornment: (\n          //     <InputAdornment position=\"end\">\n          //          <HelpOutlineIcon className={styles.helpIcon} onClick={showCallout}/>\n          //     </InputAdornment>\n          //   )\n          // }}\n        />\n      </Label>\n      {/* {showCalloutBox ? (\n        <CalloutBox>\n          {callOutText}{' '}\n          <CloseIcon className={styles.closeIcon} onClick={showCallout} />\n        </CalloutBox>\n      ) : null} */}\n    </Form>\n  );\n  "},"Descriptions":{"button":" "},"InfoType":{"instanceValue":"\n      <InputLabel className={styles.titleLabel}>Info Type</InputLabel>\n      <TitleWrapper>\n        {infoTypeValue}\n        <div>\n          <Button type='button' onClick={() => updateIsEditMode(true)}>\n            &#9998;\n          </Button>\n          <Button type='button' onClick={() => updateIsDeleteMode(true)}>\n            &#128465;\n          </Button>\n        </div>\n      </TitleWrapper>\n\n      "},"InfoTypeCreationForm":{"button":"\n/*\n  for some reason, button has been removed.  Normally this is how it looks:\n  const Button = styled.button`\n     // ns__custom_start unit: appSpec, comp: InfoTypeCreationForm, loc: buttonStyling\n     // ns__custom_end unit: appSpec, comp: InfoTypeCreationForm, loc: buttonStyling\n  `;\n */\n\n","handleChange":"\n  function handleChange(e) {\n    updateInfoTypeValue(e.target.value);\n    onChange(e.target.value);\n  }\n\n  ","handleKeyPress":"\n  function handleKeyPress(e) {\n    // if (e.charCode === 13) {\n    //   handleSubmit(e);\n    // }\n    if (e.key === 'Enter') {\n      handleSubmit(e);\n    }\n  }\n\n  ","return":"\n  return (\n    <Form>\n      <Label htmlFor='infoType-value'>\n        <TextField\n          className={styles.textField}\n          label={callOutText}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          value={infoTypeValue}\n          disabled={disabled || loading}\n          variant='outlined'\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position='end'>\n                <HelpOutlineIcon\n                  className={styles.helpIcon}\n                  onClick={showCallout}\n                />\n              </InputAdornment>\n            ),\n          }}\n        />\n      </Label>\n\n      {showCalloutBox ? (\n        <CalloutBox>\n          {callOutText}\n          <CloseIcon className={styles.closeIcon} onClick={showCallout} />\n        </CalloutBox>\n      ) : null}\n    </Form>\n  );\n\n  "},"InfoTypes":{"button":" ","renderReturn":"\n    return (\n      <>\n        <InfoTypesStyleWrapper ref={this.wrapperRef} onClick={this.handleClick}>\n          {parentState.map((infoType) => {\n            if (infoType.parentId) return true;\n\n            // eslint-disable-next-line consistent-return\n            return (\n              <InfoType\n                key={v4()}\n                infoType={infoType}\n                selected={infoType.id === selectedInfoTypeId}\n                onUpdate={onUpdate}\n                parentId={screenId}\n                refetchQueries={refetchQueries}\n                onSelect={this.handleSelect}\n                // ns__custom_start unit: appSpec, comp: InfoTypes, loc: addedPropsForChildren\n                hasParentId={infoType.parentId}\n                childState={childState}\n                onChange={this.onChangeHelper}\n                // ns__custom_end unit: appSpec, comp: InfoTypes, loc: addedPropsForChildren\n              />\n            );\n          })}\n\n          {/* ns__custom_start unit: appSpec, comp: InfoTypes, loc: renderEnding */}\n          {/* ns__custom_end unit: appSpec, comp: InfoTypes, loc: renderEnding */}\n        </InfoTypesStyleWrapper>\n        <InfoTypeCreationForm\n          parentId={screenId}\n          refetchQueries={refetchQueries}\n          // ns__custom_start unit: appSpec, comp: InfoTypes, loc: addedPropsForCreationForm\n          label={label}\n          validateInfoTypes={validateInfoTypes}\n          onChange={this.onChangeHelper}\n          /* ns__custom_start unit: appSpec, comp: InfoTypes, loc: addedPropsForCreationForm */\n          /* ns__custom_end unit: appSpec, comp: InfoTypes, loc: addedPropsForCreationForm */\n        />\n        {subInfoTypeValueCount >= 3 ? (\n          <SubInfoTypeCreationForm\n            disabled\n            validateSubInfoTypes={0}\n            textLabel='What is the sub Info Type fo...'\n            subInfoTypeValueCount={subInfoTypeValueCount}\n            label={label}\n          />\n        ) : null}\n      </>\n    );\n\n    "},"Screen":{"instanceValue":"\n      <InputLabel className={styles.titleLabel}>Screen</InputLabel>\n      <TitleWrapper>\n        {screenValue}\n        <div>\n          <Button type='button' onClick={() => updateIsEditMode(true)}>\n            &#9998;\n          </Button>\n          <Button type='button' onClick={() => updateIsDeleteMode(true)}>\n            &#128465;\n          </Button>\n        </div>\n      </TitleWrapper>\n\n      ","childrenList":"\n      <InfoTypes\n        infoTypes={infoTypes}\n        screenId={screen.id}\n        label={screenValue}\n        refetchQueries={refetchQueries}\n      />\n\n      "},"ScreenCreationForm":{"button":" ","handleKeyPress":"\n  function handleKeyPress(e) {\n    // ns__custom_start unit: appSpec, comp: UserTypeCreationForm, loc: insideHandleKeyPress\n    // if (e.charCode === 13) {\n    //   handleSubmit(e);\n    // }\n    if (e.key === 'Enter') {\n      handleSubmit(e);\n    }\n    // ns__custom_end unit: appSpec, comp: UserTypeCreationForm, loc: insideHandleKeyPress\n  }\n\n  ","return":"\n  // return (\n  //     <Form>\n  //       <Label htmlFor='screen-value'>\n  //         Screen:\n  //         <InputContainer>\n  //           <Input\n  //               id='screen-value'\n  //               type='text'\n  //               onChange={handleChange}\n  //               onKeyPress={handleKeyPress}\n  //               value={screenValue}\n  //               disabled={loading}\n  //           />\n\n  //           <IconButton className={styles.button} onClick={showCallout}>\n  //             <HelpOutlineIcon className={styles.helpIcon} />\n  //           </IconButton>\n  //         </InputContainer>\n  //         <Button type='submit' disabled={loading} onClick={handleSubmit}>\n  //           {loading ? 'Creating Screen...' : 'Create Screen'}\n  //         </Button>\n  //       </Label>\n  //       {showCalloutBox ? (\n  //           <CalloutBox>\n  //             {callOutText}{' '}\n  //             <CloseIcon className={styles.closeIcon} onClick={showCallout} />\n  //           </CalloutBox>\n  //       ) : null}\n  //     </Form>\n  // );\n\n  "},"Screens":{"button":" ","renderReturn":"\n    return (\n      <>\n        <ScreensStyleWrapper ref={this.wrapperRef} onClick={this.handleClick}>\n          {screens.map((screen) => (\n            <Screen\n              key={v4()}\n              screen={screen}\n              selected={screen.id === selectedScreenId}\n              onUpdate={onUpdate}\n              parentId={userTypeId}\n              refetchQueries={refetchQueries}\n              onSelect={this.handleSelect}\n            />\n          ))}\n          {/* ns__custom_start unit: appSpec, comp: Screens, loc: renderEnding */}\n          {/* ns__custom_end unit: appSpec, comp: Screens, loc: renderEnding */}\n        </ScreensStyleWrapper>\n        <ScreenCreationForm\n          parentId={userTypeId}\n          refetchQueries={refetchQueries}\n          /* ns__custom_start unit: appSpec, comp: Screens, loc: addedProps */\n          validateScreens={validateScreens}\n          onChange={this.onChangeHelper}\n          label={label}\n          /* ns__custom_end unit: appSpec, comp: Screens, loc: addedProps */\n        />\n\n        {infoTypeValueCount >= 3 ? (\n          <InfoTypeCreationForm\n            disabled\n            validateInfoTypes={0}\n            textLabel='What is the Info Type fo...'\n            infoTypeValueCount={infoTypeValueCount}\n            label={label}\n          />\n        ) : null}\n      </>\n    );\n\n    "},"UserType":{"instanceValue":"\n      <InputLabel className={styles.titleLabel}>User Type</InputLabel>\n      <TitleWrapper>\n        {userTypeValue}\n        <div>\n          <Button type='button' onClick={() => updateIsEditMode(true)}>\n            &#9998;\n          </Button>\n          <Button type='button' onClick={() => updateIsDeleteMode(true)}>\n            &#128465;\n          </Button>\n        </div>\n      </TitleWrapper>\n\n      ","childrenList":"\n      <Screens\n        screens={screens}\n        userTypeId={userType.id}\n        label={userTypeValue}\n        refetchQueries={refetchQueries}\n      />\n\n      "},"UserTypeCreationForm":{"button":" ","handleSubmit":"\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!userTypeValue) {\n      return;\n    }\n\n    updateLoading(true);\n\n    const createUserTypeResponse = await createUserType({\n      variables: {\n        actionId: CREATE_USER_TYPE_FOR_APP_SPEC_ACTION_ID,\n        executionParameters: JSON.stringify({\n          parentInstanceId: parentId,\n          value: userTypeValue,\n        }),\n        unrestricted: false,\n      },\n      refetchQueries,\n    });\n\n    // JSON.parse(createUserTypeResponse.data.Execute);\n\n    updateUserTypeValue('');\n    updateLoading(false);\n  }\n\n  ","handleKeyPress":"\n  function handleKeyPress(e) {\n    // ns__custom_start unit: appSpec, comp: UserTypeCreationForm, loc: insideHandleKeyPress\n    // if (e.charCode === 13) {\n    //   handleSubmit(e);\n    // }\n    if (e.key === 'Enter') {\n      handleSubmit(e);\n    }\n    // ns__custom_end unit: appSpec, comp: UserTypeCreationForm, loc: insideHandleKeyPress\n  }\n\n  ","return":"\n  return (\n    <Container className={styles.customContainer} maxWidth='sm'>\n      {/* ns__custom_start unit: appSpec, comp: UserTypeCreationForm, loc: insideReturn */}\n      <Label htmlFor='userType-value'>\n        <TextField\n          className={styles.textField}\n          label={callOutText}\n          value={userTypeValue}\n          onChange={(e) => {\n            handleChange(e);\n            onChange(e.target.value);\n          }}\n          onKeyPress={handleKeyPress}\n          disabled={loading || disabled}\n          variant='outlined'\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position='end'>\n                <HelpOutlineIcon\n                  className={styles.helpIcon}\n                  onClick={showCallout}\n                />\n              </InputAdornment>\n            ),\n          }}\n        />\n      </Label>\n      {showCalloutBox ? (\n        <CalloutBox>\n          {callOutText}\n          <CloseIcon className={styles.closeIcon} onClick={showCallout} />\n        </CalloutBox>\n      ) : null}\n      {/* ns__custom_end unit: appSpec, comp: UserTypeCreationForm, loc: insideReturn */}\n    </Container>\n  );\n\n  "},"UserTypes":{"button":" ","renderReturn":"\n    return (\n      <>\n        <UserTypesStyleWrapper ref={this.wrapperRef} onClick={this.handleClick}>\n          {/* <UserTypeCreationForm\n          parentId={ appId }\n          refetchQueries={refetchQueries}\n          // ns__custom_start unit: appSpec, comp: UserTypes, loc: addedPropsForCreationForm\n          validateUserTypes={validateUserTypes}\n          // ns__custom_start unit: appSpec, comp: UserTypes, loc: addedPropsForCreationForm\n        /> */}\n\n          {userTypes.map((userType) => (\n            <UserType\n              key={v4()}\n              userType={userType}\n              selected={userType.id === selectedUserTypeId}\n              onUpdate={onUpdate}\n              parentId={appId}\n              refetchQueries={refetchQueries}\n              onSelect={this.handleSelect}\n            />\n          ))}\n          {/* ns__custom_start unit: appSpec, comp: UserTypes, loc: renderEnding */}\n\n          {/* ns__custom_end unit: appSpec, comp: UserTypes, loc: renderEnding */}\n        </UserTypesStyleWrapper>\n        <UserTypeCreationForm\n          parentId={appId}\n          refetchQueries={refetchQueries}\n          // ns__custom_start unit: appSpec, comp: UserTypes, loc: addedPropsForCreationForm\n          validateUserTypes={validateUserTypes}\n          onChange={this.onChangeHelper}\n          label={label}\n          // ns__custom_start unit: appSpec, comp: UserTypes, loc: addedPropsForCreationForm\n        />\n        {userTypeCreationCount >= 3 ? (\n          <ScreenCreationForm\n            disabled\n            validateScreens={0}\n            textLabel='What is the Screen name fo...'\n            userTypeCreationCount={userTypeCreationCount}\n            label={label}\n          />\n        ) : null}\n      </>\n    );\n\n    "}}},"removedCode":{"appSpec":{"Apps":{"AppCreationForm":"true"}}}}
