{"version":3,"sources":["../node_modules/graphql-tag/src/index.js","../node_modules/graphql/jsutils/devAssert.mjs","../node_modules/graphql/jsutils/defineToJSON.mjs","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/kinds.mjs","../node_modules/graphql/language/source.mjs","../node_modules/graphql/jsutils/defineToStringTag.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/parser.mjs"],"names":["parse","require","normalize","string","replace","trim","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","parseDocument","doc","cacheKey","parsed","kind","Error","stripLoc","removeLocAtThisLevel","docType","Object","prototype","toString","call","map","d","loc","startToken","endToken","key","value","valueType","keys","hasOwnProperty","ast","astFragmentMap","definitions","i","length","fragmentDefinition","fragmentName","name","sourceKey","source","body","substring","start","end","console","warn","push","processFragments","gql","args","Array","slice","arguments","literals","result","default","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","module","exports","devAssert","condition","message","Boolean","defineToJSON","classObject","fn","undefined","toJSON","inspect","nodejsCustomInspectSymbol","_typeof","obj","Symbol","iterator","constructor","getLocation","position","match","lineRegexp","line","column","exec","index","printLocation","location","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","concat","lines","split","locationLine","sublineIndex","Math","floor","sublineColumnNum","sublines","printPrefixedLines","subline","existingLines","filter","_ref","padLen","max","apply","_ref2","_ref3","str","prefix","join","len","GraphQLError","nodes","positions","path","originalError","extensions","_nodes","isArray","_source","node","_locations","_positions","reduce","list","pos","_extensions","originalExtensions","defineProperties","this","enumerable","writable","locations","stack","defineProperty","configurable","captureStackTrace","syntaxError","description","create","error","output","_i2","_error$nodes2","_i4","_error$locations2","printError","Kind","freeze","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","Source","toStringTag","get","TokenKind","SOF","EOF","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","COMMENT","advanceLexer","lastToken","token","lookahead","next","readToken","Tok","prev","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","toUpperCase","lexer","bodyLength","startPosition","charCodeAt","lineStart","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","readNumber","chunkStart","rawValue","dedentBlockStringValue","readBlockString","charCode","a","b","c","char2hex","invalidSequence","readString","unexpectedCharacterMessage","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","options","Parser","parseValue","parser","expectToken","parseValueLiteral","parseType","type","parseTypeReference","sourceObj","_lexer","startOfFileToken","advance","createLexer","_options","_proto","parseName","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","operation","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","defaultValue","expectOptionalToken","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","parseArguments","isConst","item","parseConstArgument","parseArgument","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","expectKeyword","parseList","parseObject","parseStringLiteral","block","_this","values","any","_this2","fields","parseObjectField","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","types","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","noLocation","Loc","getTokenDesc","atToken","openKind","parseFn","closeKind"],"mappings":"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","file":"static/js/1.e9ff0507.chunk.js","sourcesContent":["var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n","export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","import nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON(classObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}\n","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n","import { getLocation } from '../language/location';\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var sublineIndex = Math.floor(columnNum / 80);\n    var sublineColumnNum = columnNum % 80;\n    var sublines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      sublines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), sublines[0]]].concat(sublines.slice(1, sublineIndex + 1).map(function (subline) {\n      return ['', subline];\n    }), [[' ', whitespace(sublineColumnNum - 1) + '^'], ['', sublines[sublineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n","import isObjectLike from '../jsutils/isObjectLike';\nimport { getLocation } from '../language/location';\nimport { printLocation, printSourceLocation } from '../language/printLocation';\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions;\n\n  if (_extensions == null && originalError != null) {\n    var originalExtensions = originalError.extensions;\n\n    if (isObjectLike(originalExtensions)) {\n      _extensions = originalExtensions;\n    }\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n","import { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","import devAssert from '../jsutils/devAssert';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive');\n  this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive');\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);\n","/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n","import defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { dedentBlockStringValue } from './blockString';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n// @internal\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or e\n\n\n  if (code === 46 || code === 69 || code === 101) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}\n","/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n","import inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { Kind } from './kinds';\nimport { Source } from './source';\nimport { createLexer } from './lexer';\nimport { DirectiveLocation } from './directiveLocation';\nimport { TokenKind } from './tokenKind';\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser =\n/*#__PURE__*/\nfunction () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj)));\n    this._lexer = createLexer(sourceObj);\n    this._options = options || {};\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.experimentalFragmentVariables) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        if (token.value === 'true' || token.value === 'false') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.BOOLEAN,\n            value: token.value === 'true',\n            loc: this.loc(token)\n          };\n        } else if (token.value === 'null') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.NULL,\n            loc: this.loc(token)\n          };\n        }\n\n        this._lexer.advance();\n\n        return {\n          kind: Kind.ENUM,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      this._options.allowLegacySDLImplementsInterfaces && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    // Legacy support for the SDL?\n    if (this._options.allowLegacySDLEmptyFields && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *   - extend interface Name Directives[Const]? FieldsDefinition\n   *   - extend interface Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    if (!this._options.noLocation) {\n      return new Loc(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken || this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n"],"sourceRoot":""}