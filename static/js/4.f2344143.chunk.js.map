{"version":3,"sources":["actions/index.js","flattenData/index.js","components/AppSpec/AppCreationForm/index.js","components/source-props/appSpec.js","components/EditInstanceForm/index.js","components/DeleteInstanceMenu/index.js","components/AppSpec/UserTypeCreationForm/index.js","components/AppSpec/ScreenCreationForm/index.js","components/AppSpec/InfoTypeCreationForm/index.js","components/AppSpec/InfoType/index.js","components/AppSpec/InfoTypes/index.js","components/AppSpec/Screen/index.js","components/AppSpec/Screens/index.js","components/AppSpec/UserType/index.js","components/AppSpec/UserTypes/index.js","components/AppSpec/DescriptionCreationForm/index.js","components/AppSpec/Description/index.js","components/AppSpec/Descriptions/index.js","components/AppSpec/App/index.js"],"names":["increment","type","decrement","flattenData","element","flatData","instance","children","length","filter","child","map","typeId","instances","flattenChildData","styled","div","button","compose","graphql","EXECUTE_ACTION","name","customerId","createApp","refetchQueries","useState","appValue","updateAppValue","loading","updateLoading","dispatch","useHistory","useSelector","state","counter","useDispatch","handleSubmit","e","a","async","preventDefault","variables","actionId","CREATE_APP_FOR_APP_SPEC_ACTION_ID","executionParameters","JSON","stringify","parentInstanceId","value","unrestricted","createAppResponse","parse","data","ExecuteAction","className","class","style","maxWidth","margin","htmlFor","placeholder","id","onChange","target","onKeyPress","charCode","disabled","marginTop","display","marginLeft","onClick","SOURCE_APP_SPEC_QUERY","gql","APP_SPEC_RELATIONSHIPS","app","userType","screen","infoType","description","Button","props","hoverColor","EditInstanceForm","label","onSave","onCancel","Container","DeleteInstanceMenu","onDelete","parentId","createUserType","userTypeValue","updateUserTypeValue","CREATE_USER_TYPE_FOR_APP_SPEC_ACTION_ID","createUserTypeResponse","createScreen","screenValue","updateScreenValue","CREATE_SCREEN_FOR_APP_SPEC_ACTION_ID","createScreenResponse","createInfoType","infoTypeValue","updateInfoTypeValue","CREATE_INFO_TYPE_FOR_APP_SPEC_ACTION_ID","createInfoTypeResponse","InfoTypeStyleWrapper","selected","isDeleting","updateInstance","deleteInstance","onSelect","isEditMode","updateIsEditMode","isSaving","updateIsSaving","isDeleteMode","updateIsDeleteMode","updateIsDeleting","UPDATE_INFO_TYPE_FOR_APP_SPEC_ACTION_ID","instanceId","DELETE_INFO_TYPE_FOR_APP_SPEC_ACTION_ID","InfoTypes","selectedInfoTypeId","wrapperRef","createRef","handleClick","node","current","contains","setState","handleSelect","document","addEventListener","this","removeEventListener","screenId","infoTypes","onUpdate","ref","key","v4","Component","ScreenStyleWrapper","infoTypeData","find","TYPE_INFO_TYPE_ID","DELETE_SCREEN_FOR_APP_SPEC_ACTION_ID","Screens","selectedScreenId","userTypeId","screens","UserTypeStyleWrapper","screenData","TYPE_SCREEN_ID","UPDATE_USER_TYPE_FOR_APP_SPEC_ACTION_ID","DELETE_USER_TYPE_FOR_APP_SPEC_ACTION_ID","mapDispatchToProps","UserTypes","selectedUserTypeId","appId","userTypes","connect","Form","createDescription","descriptionValue","updateDescriptionValue","CREATE_DESCRIPTION_FOR_APP_SPEC_ACTION_ID","createDescriptionResponse","DescriptionStyleWrapper","UPDATE_DESCRIPTION_FOR_APP_SPEC_ACTION_ID","DELETE_DESCRIPTION_FOR_APP_SPEC_ACTION_ID","Descriptions","selectedDescriptionId","descriptions","userTypeData","TYPE_USER_TYPE_ID","descriptionData","TYPE_DESCRIPTION_ID","UPDATE_APP_FOR_APP_SPEC_ACTION_ID","DELETE_APP_FOR_APP_SPEC_ACTION_ID","minWidth"],"mappings":"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","file":"static/js/4.f2344143.chunk.js","sourcesContent":["export const increment = () => {\r\n  return {\r\n    type: \"INCREMENT\",\r\n  };\r\n};\r\n\r\nexport const decrement = () => {\r\n  return {\r\n    type: \"DECREMENT\",\r\n  };\r\n};\r\n\r\nexport const currentUser = () => {\r\n  return {\r\n    type: \"CURRENT_USER\",\r\n  };\r\n};\r\n","export function flattenChildData(element) {\r\n  const flatData ={\r\n    typeId: element.typeId,\r\n    instances: []\r\n  };\r\n\r\n  if (element.instances && element.instances.length > 0) {\r\n    flatData.instances = element.instances.filter(child => !!child).map(\r\n      instance => flattenData(instance)\r\n    );\r\n  }\r\n\r\n  return flatData;\r\n};\r\n\r\nexport function flattenData(element) {\r\n  const flatData = {\r\n    ...element.instance,\r\n    children: []\r\n  };\r\n\r\n  if (element.children && element.children.length > 0) {\r\n    flatData.children = element.children.filter(child => !!child).map(\r\n      child => flattenChildData(child)\r\n    );\r\n  }\r\n\r\n  return flatData;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\nimport styled from \"styled-components\";\r\nimport { Redirect } from \"react-router\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { withNoStack, EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\n\r\nimport { CREATE_APP_FOR_APP_SPEC_ACTION_ID } from \"../../../config\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { increment, decrement } from \"../../../actions\";\r\n\r\n// change styling here\r\nconst Form = styled.div`\r\n  margin: 2em;\r\n  padding: 1.5em;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #f5f5f5;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 1em;\r\n`;\r\n\r\nfunction AppCreationForm({ customerId, createApp, refetchQueries }) {\r\n  const [appValue, updateAppValue] = useState(\"\");\r\n  const [loading, updateLoading] = useState(false);\r\n  const history = useHistory();\r\n  const counter = useSelector((state) => state.counter);\r\n  const dispatch = useDispatch();\r\n\r\n  function handleChange(e) {\r\n    updateAppValue(e.target.value);\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (!appValue) {\r\n      return;\r\n    }\r\n\r\n    updateLoading(true);\r\n\r\n    const createAppResponse = await createApp({\r\n      variables: {\r\n        actionId: CREATE_APP_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          parentInstanceId: customerId,\r\n          value: appValue,\r\n        }),\r\n        unrestricted: false,\r\n      },\r\n      refetchQueries,\r\n    });\r\n\r\n    const newAppData = JSON.parse(createAppResponse.data.ExecuteAction);\r\n    updateAppValue(\"\");\r\n    updateLoading(false);\r\n    dispatch(increment());\r\n    // history.push(\"/meeting-step/create-user-type\");\r\n  }\r\n\r\n  function handleKeyPress(e) {\r\n    if (e.charCode === 13) {\r\n      handleSubmit(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"box\">\r\n        <div\r\n          class=\"text-center\"\r\n          style={{ maxWidth: \"350px\", margin: \"1em auto 2em auto\" }}\r\n        >\r\n          <strong>Tell us more about what you want in your web app! </strong>\r\n        </div>\r\n        <form>\r\n          <label htmlFor=\"app-value\">\r\n            <input\r\n              className=\"input\"\r\n              placeholder=\"Create Name\"\r\n              id=\"app-value\"\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              onKeyPress={handleKeyPress}\r\n              value={appValue}\r\n              disabled={loading}\r\n            />\r\n\r\n            <textarea className=\"input\" placeholder=\"Description\"></textarea>\r\n          </label>\r\n        </form>\r\n      </div>\r\n      <div style={{ marginTop: \"1em\" }}>\r\n        <button\r\n          style={{ display: \"block\", marginLeft: \"auto\" }}\r\n          className=\"button button--yellow\"\r\n          type=\"submit\"\r\n          disabled={loading}\r\n          onClick={handleSubmit}\r\n        >\r\n          {loading ? \"Creating App...\" : \"Create App\"}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default compose(graphql(EXECUTE_ACTION, { name: \"createApp\" }))(\r\n  AppCreationForm\r\n);\r\n","import gql from 'graphql-tag';\r\n\r\n  export const SOURCE_APP_SPEC_QUERY = gql`\r\n  query UNIT(\r\n    $id: ID!\r\n    $typeRelationships: String!\r\n    $parameters: String\r\n  ) {\r\n    unitData(\r\n      unitId: $id\r\n      typeRelationships: $typeRelationships\r\n      parameters: $parameters\r\n    )\r\n    {\r\n      \r\n        instance {\r\n            id\r\n            value\r\n        }\r\n        children {\r\n            typeId\r\n            instances {\r\n                \r\n\t\tinstance {\r\n\t\t    id\r\n\t\t    value\r\n\t\t}\r\n\t\tchildren {\r\n\t\t    typeId\r\n\t\t    instances {\r\n\t\t        \r\n\t\t\tinstance {\r\n\t\t\t    id\r\n\t\t\t    value\r\n\t\t\t}\r\n\t\t\tchildren {\r\n\t\t\t    typeId\r\n\t\t\t    instances {\r\n\t\t\t        \r\n\t\t\t\tinstance {\r\n\t\t\t\t    id\r\n\t\t\t\t    value\r\n\t\t\t\t}\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t    }\r\n\t\t}\r\n            }\r\n        }\r\n    \r\n    }\r\n  }\r\n`;\r\n\r\nexport const APP_SPEC_RELATIONSHIPS = {\r\n   app: {\r\n        userType: {\r\n        screen: {\r\n        infoType: null\r\n    }\r\n    }, description: null\r\n    },\r\n};","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  padding: 0;\r\n  color: #bbbbbb;\r\n  transition: color 0.5s ease;\r\n  &:hover {\r\n    color: ${props => props.hoverColor || '#000000'};\r\n  }\r\n`;\r\n\r\nfunction EditInstanceForm({\r\n  id,\r\n  label,\r\n  value,\r\n  onChange,\r\n  onSave,\r\n  onCancel,\r\n  disabled,\r\n}) {\r\n  return (\r\n    <>\r\n      <label htmlFor={id}>\r\n        {label}\r\n        <input\r\n          id={id}\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={onChange}\r\n          disabled={disabled}\r\n        />\r\n      </label>\r\n      <Button\r\n        type=\"button\"\r\n        hoverColor=\"#00FF00\"\r\n        onClick={onSave}\r\n        disabled={disabled}\r\n      >\r\n        &#10003;\r\n      </Button>\r\n      <Button\r\n        type=\"button\"\r\n        hoverColor=\"#FF0000\"\r\n        onClick={onCancel}\r\n        disabled={disabled}\r\n      >\r\n        &#10005;\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditInstanceForm;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  padding: 0;\r\n  color: #bbbbbb;\r\n  transition: color 0.5s ease;\r\n  &:hover {\r\n    color: ${props => props.hoverColor || '#000000'};\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  color: red;\r\n  margin: 1em;\r\n  padding: 1em;\r\n  border: 1px solid #eeeeee;\r\n`;\r\n\r\nfunction DeleteInstanceMenu({\r\n  onDelete,\r\n  onCancel,\r\n  disabled,\r\n}) {\r\n  return (\r\n    <Container>\r\n      Delete?\r\n      <Button\r\n        type=\"button\"\r\n        hoverColor=\"#00FF00\"\r\n        onClick={onDelete}\r\n        disabled={disabled}\r\n      >\r\n        &#10003;\r\n      </Button>\r\n      <Button\r\n        type=\"button\"\r\n        hoverColor=\"#FF0000\"\r\n        onClick={onCancel}\r\n        disabled={disabled}\r\n      >\r\n        &#10005;\r\n      </Button>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default DeleteInstanceMenu;\r\n","import React, { useState } from \"react\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\nimport styled from \"styled-components\";\r\nimport { withNoStack, EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { increment, decrement } from \"../../../actions\";\r\nimport { CREATE_USER_TYPE_FOR_APP_SPEC_ACTION_ID } from \"../../../config\";\r\n\r\n// change styling here\r\nconst Form = styled.div`\r\n  margin: 2em;\r\n  padding: 1.5em;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #f5f5f5;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 1em;\r\n`;\r\n\r\nfunction UserTypeCreationForm({ parentId, createUserType, refetchQueries }) {\r\n  const [userTypeValue, updateUserTypeValue] = useState(\"\");\r\n  const [loading, updateLoading] = useState(false);\r\n  const counter = useSelector((state) => state.counter);\r\n  const dispatch = useDispatch();\r\n  function handleChange(e) {\r\n    updateUserTypeValue(e.target.value);\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (!userTypeValue) {\r\n      return;\r\n    }\r\n\r\n    updateLoading(true);\r\n\r\n    const createUserTypeResponse = await createUserType({\r\n      variables: {\r\n        actionId: CREATE_USER_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          parentInstanceId: parentId,\r\n          value: userTypeValue,\r\n        }),\r\n        unrestricted: false,\r\n      },\r\n      refetchQueries,\r\n    });\r\n    dispatch(increment());\r\n\r\n    const newUserTypeData = JSON.parse(\r\n      createUserTypeResponse.data.ExecuteAction\r\n    );\r\n\r\n    updateUserTypeValue(\"\");\r\n    updateLoading(false);\r\n  }\r\n\r\n  function handleKeyPress(e) {\r\n    if (e.charCode === 13) {\r\n      handleSubmit(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"userType-value\">\r\n        <input\r\n          placeholder=\"New User Type\"\r\n          className=\"input\"\r\n          id=\"userType-value\"\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          onKeyPress={handleKeyPress}\r\n          value={userTypeValue}\r\n          disabled={loading}\r\n        />\r\n      </label>\r\n\r\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\r\n        {loading ? \"Creating UserType...\" : \"Create UserType\"}\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default compose(graphql(EXECUTE_ACTION, { name: \"createUserType\" }))(\r\n  UserTypeCreationForm\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\nimport styled from \"styled-components\";\r\nimport { withNoStack, EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\n\r\nimport { CREATE_SCREEN_FOR_APP_SPEC_ACTION_ID } from \"../../../config\";\r\n\r\n// change styling here\r\nconst Form = styled.div`\r\n  margin: 2em;\r\n  padding: 1.5em;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #f5f5f5;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 1em;\r\n`;\r\n\r\nfunction ScreenCreationForm({ parentId, createScreen, refetchQueries }) {\r\n  const [screenValue, updateScreenValue] = useState(\"\");\r\n  const [loading, updateLoading] = useState(false);\r\n\r\n  function handleChange(e) {\r\n    updateScreenValue(e.target.value);\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (!screenValue) {\r\n      return;\r\n    }\r\n\r\n    updateLoading(true);\r\n\r\n    const createScreenResponse = await createScreen({\r\n      variables: {\r\n        actionId: CREATE_SCREEN_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          parentInstanceId: parentId,\r\n          value: screenValue,\r\n        }),\r\n        unrestricted: false,\r\n      },\r\n      refetchQueries,\r\n    });\r\n\r\n    const newScreenData = JSON.parse(createScreenResponse.data.ExecuteAction);\r\n\r\n    updateScreenValue(\"\");\r\n    updateLoading(false);\r\n  }\r\n\r\n  function handleKeyPress(e) {\r\n    if (e.charCode === 13) {\r\n      handleSubmit(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"screen-value\">\r\n        <input\r\n          placeholder=\"New Screen\"\r\n          className=\"input\"\r\n          id=\"screen-value\"\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          onKeyPress={handleKeyPress}\r\n          value={screenValue}\r\n          disabled={loading}\r\n        />\r\n      </label>\r\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\r\n        {loading ? \"Creating Screen...\" : \"Create Screen\"}\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default compose(graphql(EXECUTE_ACTION, { name: \"createScreen\" }))(\r\n  ScreenCreationForm\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\nimport styled from \"styled-components\";\r\nimport { withNoStack, EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\n\r\nimport { CREATE_INFO_TYPE_FOR_APP_SPEC_ACTION_ID } from \"../../../config\";\r\n\r\n// change styling here\r\nconst Form = styled.div`\r\n  margin: 2em;\r\n  padding: 1.5em;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #f5f5f5;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 1em;\r\n`;\r\n\r\nfunction InfoTypeCreationForm({ parentId, createInfoType, refetchQueries }) {\r\n  const [infoTypeValue, updateInfoTypeValue] = useState(\"\");\r\n  const [loading, updateLoading] = useState(false);\r\n\r\n  function handleChange(e) {\r\n    updateInfoTypeValue(e.target.value);\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (!infoTypeValue) {\r\n      return;\r\n    }\r\n\r\n    updateLoading(true);\r\n\r\n    const createInfoTypeResponse = await createInfoType({\r\n      variables: {\r\n        actionId: CREATE_INFO_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          parentInstanceId: parentId,\r\n          value: infoTypeValue,\r\n        }),\r\n        unrestricted: false,\r\n      },\r\n      refetchQueries,\r\n    });\r\n\r\n    const newInfoTypeData = JSON.parse(\r\n      createInfoTypeResponse.data.ExecuteAction\r\n    );\r\n\r\n    updateInfoTypeValue(\"\");\r\n    updateLoading(false);\r\n  }\r\n\r\n  function handleKeyPress(e) {\r\n    if (e.charCode === 13) {\r\n      handleSubmit(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <label htmlFor=\"infoType-value\">\r\n        <input\r\n          className=\"input\"\r\n          placeholder=\"New Type of Info\"\r\n          id=\"infoType-value\"\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          onKeyPress={handleKeyPress}\r\n          value={infoTypeValue}\r\n          disabled={loading}\r\n        />\r\n      </label>\r\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\r\n        {loading ? \"Creating InfoType...\" : \"Create InfoType\"}\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default compose(graphql(EXECUTE_ACTION, { name: \"createInfoType\" }))(\r\n  InfoTypeCreationForm\r\n);\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\n\r\nimport {\r\n  UPDATE_INFO_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n  DELETE_INFO_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n} from \"../../../config\";\r\n\r\nimport EditInstanceForm from \"../../EditInstanceForm\";\r\nimport DeleteInstanceMenu from \"../../DeleteInstanceMenu\";\r\n\r\n// add styling here\r\nconst InfoTypeStyleWrapper = styled.div(\r\n  ({ selected, isDeleting }) => `\r\n  margin: 2em 1em;\r\n  padding: 1.5em;\r\n  border: ${selected ? \"1px solid aquamarine\" : \"1px solid white\"};\r\n  border-radius: 10px;\r\n  box-shadow: 5px 5px 10px #888888;\r\n  background-color: ${isDeleting && \"tomato\"};\r\n  cursor: ${selected ? \"auto\" : \"pointer\"};\r\n\r\n  &:hover {\r\n    border: 1px solid aquamarine;\r\n  }\r\n`\r\n);\r\n\r\nconst Button = styled.button`\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  padding: 0;\r\n  color: #bbbbbb;\r\n  transition: color 0.5s ease;\r\n  &:hover {\r\n    color: ${(props) => props.hoverColor || \"#000000\"};\r\n  }\r\n`;\r\n\r\nfunction InfoType({\r\n  infoType,\r\n  parentId,\r\n  selected,\r\n  updateInstance,\r\n  deleteInstance,\r\n  refetchQueries,\r\n  onSelect,\r\n}) {\r\n  const [infoTypeValue, updateInfoTypeValue] = useState(infoType.value);\r\n  const [isEditMode, updateIsEditMode] = useState(false);\r\n  const [isSaving, updateIsSaving] = useState(false);\r\n  const [isDeleteMode, updateIsDeleteMode] = useState(false);\r\n  const [isDeleting, updateIsDeleting] = useState(false);\r\n\r\n  // if (!selected) {\r\n  //   return (\r\n  //     <InfoTypeStyleWrapper onClick={() => onSelect(infoType.id)}>\r\n  //       { infoTypeValue }\r\n  //     </InfoTypeStyleWrapper>\r\n  //   );\r\n  // }\r\n\r\n  function handleInfoTypeValueChange(e) {\r\n    updateInfoTypeValue(e.target.value);\r\n  }\r\n\r\n  async function handleInfoTypeValueSave() {\r\n    updateIsSaving(true);\r\n\r\n    await updateInstance({\r\n      variables: {\r\n        actionId: UPDATE_INFO_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          value: infoTypeValue,\r\n          instanceId: infoType.id,\r\n        }),\r\n      },\r\n      refetchQueries,\r\n    });\r\n\r\n    updateIsEditMode(false);\r\n    updateIsSaving(false);\r\n  }\r\n\r\n  function handleCancelEdit() {\r\n    updateIsEditMode(false);\r\n  }\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <InfoTypeStyleWrapper>\r\n        <EditInstanceForm\r\n          id={infoType.id}\r\n          label=\"InfoType Value:\"\r\n          value={infoTypeValue}\r\n          onChange={handleInfoTypeValueChange}\r\n          onSave={handleInfoTypeValueSave}\r\n          onCancel={handleCancelEdit}\r\n          disabled={isSaving}\r\n        />\r\n      </InfoTypeStyleWrapper>\r\n    );\r\n  }\r\n\r\n  async function handleDelete() {\r\n    updateIsDeleting(true);\r\n\r\n    try {\r\n      await deleteInstance({\r\n        variables: {\r\n          actionId: DELETE_INFO_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n          executionParameters: JSON.stringify({\r\n            parentInstanceId: parentId,\r\n            instanceId: infoType.id,\r\n          }),\r\n        },\r\n        refetchQueries,\r\n      });\r\n    } catch (e) {\r\n      updateIsDeleting(false);\r\n    }\r\n  }\r\n\r\n  function handleCancelDelete() {\r\n    updateIsDeleteMode(false);\r\n  }\r\n\r\n  if (isDeleteMode) {\r\n    return (\r\n      <InfoTypeStyleWrapper selected={selected} isDeleting={isDeleting}>\r\n        {infoTypeValue}\r\n        <DeleteInstanceMenu\r\n          onDelete={handleDelete}\r\n          onCancel={handleCancelDelete}\r\n          disabled={isDeleting}\r\n        />\r\n      </InfoTypeStyleWrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"box box--small\" selected={selected}>\r\n      <span> {infoTypeValue} </span>\r\n      <Button type=\"button\" onClick={() => updateIsEditMode(true)}>\r\n        &#9998;\r\n      </Button>\r\n      <Button type=\"button\" onClick={() => updateIsDeleteMode(true)}>\r\n        &#128465;\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default compose(\r\n  graphql(EXECUTE_ACTION, { name: \"updateInstance\" }),\r\n  graphql(EXECUTE_ACTION, { name: \"deleteInstance\" })\r\n)(InfoType);\r\n","import React, { Component, createRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { v4 } from \"uuid\";\r\n\r\nimport InfoTypeCreationForm from \"../InfoTypeCreationForm\";\r\nimport InfoType from \"../InfoType\";\r\n\r\n// np__added_start unit: appSpec, comp: InfoTypes, loc: styling\r\n\r\nconst InfoTypesStyleWrapper = styled.div``;\r\n\r\nconst Button = styled.button`\r\n  display: block;\r\n  margin: 0 auto;\r\n`;\r\n// np__added_end unit: appSpec, comp: InfoTypes, loc: styling\r\n\r\nclass InfoTypes extends Component {\r\n  state = {\r\n    selectedInfoTypeId: null,\r\n  };\r\n\r\n  wrapperRef = createRef();\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    const node = this.wrapperRef.current;\r\n\r\n    if (node && node !== e.target && !node.contains(e.target)) {\r\n      this.setState({ selectedInfoTypeId: null });\r\n    }\r\n  };\r\n\r\n  handleSelect = (id) => this.setState({ selectedInfoTypeId: id });\r\n\r\n  render() {\r\n    const { screenId, infoTypes, refetchQueries, onUpdate } = this.props;\r\n    const { selectedInfoTypeId } = this.state;\r\n\r\n    {\r\n      /* np__added_start unit: appSpec, comp: InfoTypes, loc: renderBeginning */\r\n    }\r\n    {\r\n      /* np__added_end unit: appSpec, comp: InfoTypes, loc: renderBeginning */\r\n    }\r\n\r\n    return (\r\n      <div ref={this.wrapperRef} onClick={this.handleClick}>\r\n        {infoTypes.map((infoType) => (\r\n          <InfoType\r\n            key={v4()}\r\n            infoType={infoType}\r\n            selected={infoType.id === selectedInfoTypeId}\r\n            onUpdate={onUpdate}\r\n            parentId={screenId}\r\n            refetchQueries={refetchQueries}\r\n            onSelect={this.handleSelect}\r\n          />\r\n        ))}\r\n        <br></br>\r\n        <InfoTypeCreationForm\r\n          parentId={screenId}\r\n          refetchQueries={refetchQueries}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InfoTypes;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\n\r\nimport {\r\n  UPDATE_SCREEN_FOR_APP_SPEC_ACTION_ID,\r\n  DELETE_SCREEN_FOR_APP_SPEC_ACTION_ID,\r\n  TYPE_INFO_TYPE_ID,\r\n} from \"../../../config\";\r\n\r\nimport EditInstanceForm from \"../../EditInstanceForm\";\r\nimport DeleteInstanceMenu from \"../../DeleteInstanceMenu\";\r\n\r\nimport InfoTypes from \"../InfoTypes\";\r\n\r\n// add styling here\r\nconst ScreenStyleWrapper = styled.div(\r\n  ({ selected, isDeleting }) => `\r\n  margin: 2em 1em;\r\n  padding: 1.5em;\r\n  border: ${selected ? \"1px solid aquamarine\" : \"1px solid white\"};\r\n  border-radius: 10px;\r\n  box-shadow: 5px 5px 10px #888888;\r\n  background-color: ${isDeleting && \"tomato\"};\r\n  cursor: ${selected ? \"auto\" : \"pointer\"};\r\n\r\n  &:hover {\r\n    border: 1px solid aquamarine;\r\n  }\r\n`\r\n);\r\n\r\nconst Button = styled.button`\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  padding: 0;\r\n  color: #bbbbbb;\r\n  transition: color 0.5s ease;\r\n  &:hover {\r\n    color: ${(props) => props.hoverColor || \"#000000\"};\r\n  }\r\n`;\r\n\r\nfunction Screen({\r\n  screen,\r\n  parentId,\r\n  selected,\r\n  updateInstance,\r\n  deleteInstance,\r\n  refetchQueries,\r\n  onSelect,\r\n}) {\r\n  const [screenValue, updateScreenValue] = useState(screen.value);\r\n  const [isEditMode, updateIsEditMode] = useState(false);\r\n  const [isSaving, updateIsSaving] = useState(false);\r\n  const [isDeleteMode, updateIsDeleteMode] = useState(false);\r\n  const [isDeleting, updateIsDeleting] = useState(false);\r\n\r\n  const infoTypeData =\r\n    screen.children &&\r\n    screen.children.find((child) => child.typeId === TYPE_INFO_TYPE_ID);\r\n  const infoTypes = infoTypeData ? infoTypeData.instances : [];\r\n\r\n  // if (!selected) {\r\n  //   return (\r\n  //     <ScreenStyleWrapper onClick={() => onSelect(screen.id)}>\r\n  //       {screenValue}\r\n  //     </ScreenStyleWrapper>\r\n  //   );\r\n  // }\r\n\r\n  function handleScreenValueChange(e) {\r\n    updateScreenValue(e.target.value);\r\n  }\r\n\r\n  async function handleScreenValueSave() {\r\n    updateIsSaving(true);\r\n\r\n    await updateInstance({\r\n      variables: {\r\n        actionId: UPDATE_SCREEN_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          value: screenValue,\r\n          instanceId: screen.id,\r\n        }),\r\n      },\r\n      refetchQueries,\r\n    });\r\n\r\n    updateIsEditMode(false);\r\n    updateIsSaving(false);\r\n  }\r\n\r\n  function handleCancelEdit() {\r\n    updateIsEditMode(false);\r\n  }\r\n\r\n  // if (isEditMode) {\r\n  //   return (\r\n  //     <ScreenStyleWrapper>\r\n  //       <EditInstanceForm\r\n  //         id={ screen.id }\r\n  //         label=\"Screen Value:\"\r\n  //         value={ screenValue }\r\n  //         onChange={handleScreenValueChange}\r\n  //         onSave={handleScreenValueSave}\r\n  //         onCancel={handleCancelEdit}\r\n  //         disabled={isSaving}\r\n  //       />\r\n  //     </ScreenStyleWrapper>\r\n  //   );\r\n  // }\r\n\r\n  async function handleDelete() {\r\n    updateIsDeleting(true);\r\n\r\n    try {\r\n      await deleteInstance({\r\n        variables: {\r\n          actionId: DELETE_SCREEN_FOR_APP_SPEC_ACTION_ID,\r\n          executionParameters: JSON.stringify({\r\n            parentInstanceId: parentId,\r\n            instanceId: screen.id,\r\n          }),\r\n        },\r\n        refetchQueries,\r\n      });\r\n    } catch (e) {\r\n      updateIsDeleting(false);\r\n    }\r\n  }\r\n\r\n  function handleCancelDelete() {\r\n    updateIsDeleteMode(false);\r\n  }\r\n\r\n  if (isDeleteMode) {\r\n    return (\r\n      <ScreenStyleWrapper selected={selected} isDeleting={isDeleting}>\r\n        {screenValue}\r\n        <DeleteInstanceMenu\r\n          onDelete={handleDelete}\r\n          onCancel={handleCancelDelete}\r\n          disabled={isDeleting}\r\n        />\r\n      </ScreenStyleWrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div class=\"box\" selected={selected}>\r\n      <strong> {screenValue} </strong>\r\n      <Button type=\"button\" onClick={() => updateIsEditMode(true)}>\r\n        &#9998;\r\n      </Button>\r\n      <Button type=\"button\" onClick={() => updateIsDeleteMode(true)}>\r\n        &#128465;\r\n      </Button>\r\n\r\n      <InfoTypes\r\n        infoTypes={infoTypes}\r\n        screenId={screen.id}\r\n        label=\"InfoType?\"\r\n        refetchQueries={refetchQueries}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default compose(\r\n  graphql(EXECUTE_ACTION, { name: \"updateInstance\" }),\r\n  graphql(EXECUTE_ACTION, { name: \"deleteInstance\" })\r\n)(Screen);\r\n","import React, { Component, createRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { v4 } from \"uuid\";\r\n\r\nimport ScreenCreationForm from \"../ScreenCreationForm\";\r\nimport Screen from \"../Screen\";\r\n\r\n// np__added_start unit: appSpec, comp: Screens, loc: styling\r\n\r\nconst ScreensStyleWrapper = styled.div``;\r\n\r\nconst Button = styled.button`\r\n  display: block;\r\n  margin: 0 auto;\r\n`;\r\n// np__added_end unit: appSpec, comp: Screens, loc: styling\r\n\r\nclass Screens extends Component {\r\n  state = {\r\n    selectedScreenId: null,\r\n  };\r\n\r\n  wrapperRef = createRef();\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    const node = this.wrapperRef.current;\r\n\r\n    if (node && node !== e.target && !node.contains(e.target)) {\r\n      this.setState({ selectedScreenId: null });\r\n    }\r\n  };\r\n\r\n  handleSelect = (id) => this.setState({ selectedScreenId: id });\r\n\r\n  render() {\r\n    const { userTypeId, screens, refetchQueries, onUpdate } = this.props;\r\n    const { selectedScreenId } = this.state;\r\n\r\n    {\r\n      /* np__added_start unit: appSpec, comp: Screens, loc: renderBeginning */\r\n    }\r\n    {\r\n      /* np__added_end unit: appSpec, comp: Screens, loc: renderBeginning */\r\n    }\r\n\r\n    return (\r\n      <div ref={this.wrapperRef} onClick={this.handleClick}>\r\n        {screens.map((screen) => (\r\n          <Screen\r\n            key={v4()}\r\n            screen={screen}\r\n            selected={screen.id === selectedScreenId}\r\n            onUpdate={onUpdate}\r\n            parentId={userTypeId}\r\n            refetchQueries={refetchQueries}\r\n            onSelect={this.handleSelect}\r\n          />\r\n        ))}\r\n        <br></br>\r\n        <ScreenCreationForm\r\n          parentId={userTypeId}\r\n          refetchQueries={refetchQueries}\r\n        />\r\n\r\n        {/* np__added_start unit: appSpec, comp: Screens, loc: renderEnding */}\r\n        {/* np__added_end unit: appSpec, comp: Screens, loc: renderEnding */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Screens;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\n\r\nimport {\r\n  UPDATE_USER_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n  DELETE_USER_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n  TYPE_SCREEN_ID,\r\n} from \"../../../config\";\r\n\r\nimport EditInstanceForm from \"../../EditInstanceForm\";\r\nimport DeleteInstanceMenu from \"../../DeleteInstanceMenu\";\r\n\r\nimport Screens from \"../Screens\";\r\n\r\n// add styling here\r\nconst UserTypeStyleWrapper = styled.div(\r\n  ({ selected, isDeleting }) => `\r\n  margin: 2em 1em;\r\n  padding: 1.5em;\r\n  border: ${selected ? \"1px solid aquamarine\" : \"1px solid white\"};\r\n  border-radius: 10px;\r\n  box-shadow: 5px 5px 10px #888888;\r\n  background-color: ${isDeleting && \"tomato\"};\r\n  cursor: ${selected ? \"auto\" : \"pointer\"};\r\n\r\n  &:hover {\r\n    border: 1px solid aquamarine;\r\n  }\r\n`\r\n);\r\n\r\nconst Button = styled.button`\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  padding: 0;\r\n  color: #bbbbbb;\r\n  transition: color 0.5s ease;\r\n  &:hover {\r\n    color: ${(props) => props.hoverColor || \"#000000\"};\r\n  }\r\n`;\r\n\r\nfunction UserType({\r\n  userType,\r\n  parentId,\r\n  selected,\r\n  updateInstance,\r\n  deleteInstance,\r\n  refetchQueries,\r\n  onSelect,\r\n}) {\r\n  const [userTypeValue, updateUserTypeValue] = useState(userType.value);\r\n  const [isEditMode, updateIsEditMode] = useState(false);\r\n  const [isSaving, updateIsSaving] = useState(false);\r\n  const [isDeleteMode, updateIsDeleteMode] = useState(false);\r\n  const [isDeleting, updateIsDeleting] = useState(false);\r\n\r\n  const screenData =\r\n    userType.children &&\r\n    userType.children.find((child) => child.typeId === TYPE_SCREEN_ID);\r\n  const screens = screenData ? screenData.instances : [];\r\n\r\n  // if (!selected) {\r\n  //   return (\r\n  //     <UserTypeStyleWrapper onClick={() => onSelect(userType.id)}>\r\n  //       { userTypeValue }\r\n  //     </UserTypeStyleWrapper>\r\n  //   );\r\n  // }\r\n\r\n  function handleUserTypeValueChange(e) {\r\n    updateUserTypeValue(e.target.value);\r\n  }\r\n\r\n  async function handleUserTypeValueSave() {\r\n    updateIsSaving(true);\r\n\r\n    await updateInstance({\r\n      variables: {\r\n        actionId: UPDATE_USER_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          value: userTypeValue,\r\n          instanceId: userType.id,\r\n        }),\r\n      },\r\n      refetchQueries,\r\n    });\r\n\r\n    updateIsEditMode(false);\r\n    updateIsSaving(false);\r\n  }\r\n\r\n  function handleCancelEdit() {\r\n    updateIsEditMode(false);\r\n  }\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <UserTypeStyleWrapper>\r\n        <EditInstanceForm\r\n          id={userType.id}\r\n          label=\"UserType Value:\"\r\n          value={userTypeValue}\r\n          onChange={handleUserTypeValueChange}\r\n          onSave={handleUserTypeValueSave}\r\n          onCancel={handleCancelEdit}\r\n          disabled={isSaving}\r\n        />\r\n      </UserTypeStyleWrapper>\r\n    );\r\n  }\r\n\r\n  async function handleDelete() {\r\n    updateIsDeleting(true);\r\n\r\n    try {\r\n      await deleteInstance({\r\n        variables: {\r\n          actionId: DELETE_USER_TYPE_FOR_APP_SPEC_ACTION_ID,\r\n          executionParameters: JSON.stringify({\r\n            parentInstanceId: parentId,\r\n            instanceId: userType.id,\r\n          }),\r\n        },\r\n        refetchQueries,\r\n      });\r\n    } catch (e) {\r\n      updateIsDeleting(false);\r\n    }\r\n  }\r\n\r\n  function handleCancelDelete() {\r\n    updateIsDeleteMode(false);\r\n  }\r\n\r\n  if (isDeleteMode) {\r\n    return (\r\n      <UserTypeStyleWrapper selected={selected} isDeleting={isDeleting}>\r\n        {userTypeValue}\r\n        <DeleteInstanceMenu\r\n          onDelete={handleDelete}\r\n          onCancel={handleCancelDelete}\r\n          disabled={isDeleting}\r\n        />\r\n      </UserTypeStyleWrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div class=\"box\" selected={selected}>\r\n      <strong> {userTypeValue} </strong>\r\n      <Button type=\"button\" onClick={() => updateIsEditMode(true)}>\r\n        &#9998;\r\n      </Button>\r\n      <Button type=\"button\" onClick={() => updateIsDeleteMode(true)}>\r\n        &#128465;\r\n      </Button>\r\n\r\n      <Screens\r\n        screens={screens}\r\n        userTypeId={userType.id}\r\n        label=\"Screen?\"\r\n        refetchQueries={refetchQueries}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default compose(\r\n  graphql(EXECUTE_ACTION, { name: \"updateInstance\" }),\r\n  graphql(EXECUTE_ACTION, { name: \"deleteInstance\" })\r\n)(UserType);\r\n","import React, { Component, createRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { v4 } from \"uuid\";\r\n\r\nimport UserTypeCreationForm from \"../UserTypeCreationForm\";\r\nimport UserType from \"../UserType\";\r\nimport { connect } from \"react-redux\";\r\nimport { increment, decrement } from \"../../../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    counter: state.counter,\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  increment,\r\n  decrement,\r\n};\r\n\r\nclass UserTypes extends Component {\r\n  state = {\r\n    selectedUserTypeId: null,\r\n  };\r\n  wrapperRef = createRef();\r\n  componentDidMount() {\r\n    document.addEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    const node = this.wrapperRef.current;\r\n\r\n    if (node && node !== e.target && !node.contains(e.target)) {\r\n      this.setState({ selectedUserTypeId: null });\r\n    }\r\n  };\r\n\r\n  handleSelect = (id) => this.setState({ selectedUserTypeId: id });\r\n\r\n  render() {\r\n    const { appId, userTypes, refetchQueries, onUpdate } = this.props;\r\n    const { selectedUserTypeId } = this.state;\r\n\r\n    {\r\n      /* np__added_start unit: appSpec, comp: UserTypes, loc: renderBeginning */\r\n    }\r\n    {\r\n      /* np__added_end unit: appSpec, comp: UserTypes, loc: renderBeginning */\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div ref={this.wrapperRef} onClick={this.handleClick}>\r\n          {this.props.counter >= 2 ? (\r\n            <div>\r\n              {userTypes.map((userType) => (\r\n                <UserType\r\n                  key={v4()}\r\n                  userType={userType}\r\n                  selected={userType.id === selectedUserTypeId}\r\n                  onUpdate={onUpdate}\r\n                  parentId={appId}\r\n                  refetchQueries={refetchQueries}\r\n                  onSelect={this.handleSelect}\r\n                />\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div> </div>\r\n          )}\r\n\r\n          <br></br>\r\n          {this.props.counter >= 1 ? (\r\n            <UserTypeCreationForm\r\n              parentId={appId}\r\n              refetchQueries={refetchQueries}\r\n            />\r\n          ) : (\r\n            <div />\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserTypes);\r\n","import React, { useState } from \"react\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\nimport styled from \"styled-components\";\r\nimport { withNoStack, EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\n\r\nimport { CREATE_DESCRIPTION_FOR_APP_SPEC_ACTION_ID } from \"../../../config\";\r\n\r\n// change styling here\r\nconst Form = styled.div`\r\n  margin: 2em;\r\n  padding: 1.5em;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #f5f5f5;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 1em;\r\n`;\r\n\r\nfunction DescriptionCreationForm({\r\n  parentId,\r\n  createDescription,\r\n  refetchQueries,\r\n}) {\r\n  const [descriptionValue, updateDescriptionValue] = useState(\"\");\r\n  const [loading, updateLoading] = useState(false);\r\n\r\n  function handleChange(e) {\r\n    updateDescriptionValue(e.target.value);\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (!descriptionValue) {\r\n      return;\r\n    }\r\n\r\n    updateLoading(true);\r\n\r\n    const createDescriptionResponse = await createDescription({\r\n      variables: {\r\n        actionId: CREATE_DESCRIPTION_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          parentInstanceId: parentId,\r\n          value: descriptionValue,\r\n        }),\r\n        unrestricted: false,\r\n      },\r\n      refetchQueries,\r\n    });\r\n\r\n    const newDescriptionData = JSON.parse(\r\n      createDescriptionResponse.data.ExecuteAction\r\n    );\r\n\r\n    updateDescriptionValue(\"\");\r\n    updateLoading(false);\r\n  }\r\n\r\n  function handleKeyPress(e) {\r\n    if (e.charCode === 13) {\r\n      handleSubmit(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <label htmlFor=\"description-value\">\r\n        Description:\r\n        <input\r\n          id=\"description-value\"\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          onKeyPress={handleKeyPress}\r\n          value={descriptionValue}\r\n          disabled={loading}\r\n        />\r\n      </label>\r\n      <Button type=\"submit\" disabled={loading} onClick={handleSubmit}>\r\n        {loading ? \"Creating Description...\" : \"Create Description\"}\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default compose(graphql(EXECUTE_ACTION, { name: \"createDescription\" }))(\r\n  DescriptionCreationForm\r\n);\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\n\r\nimport {\r\n  UPDATE_DESCRIPTION_FOR_APP_SPEC_ACTION_ID,\r\n  DELETE_DESCRIPTION_FOR_APP_SPEC_ACTION_ID,\r\n} from \"../../../config\";\r\n\r\nimport EditInstanceForm from \"../../EditInstanceForm\";\r\nimport DeleteInstanceMenu from \"../../DeleteInstanceMenu\";\r\n\r\n// add styling here\r\nconst DescriptionStyleWrapper = styled.div(\r\n  ({ selected, isDeleting }) => `\r\n  margin: 2em 1em;\r\n  padding: 1.5em;\r\n  border: ${selected ? \"1px solid aquamarine\" : \"1px solid white\"};\r\n  border-radius: 10px;\r\n  box-shadow: 5px 5px 10px #888888;\r\n  background-color: ${isDeleting && \"tomato\"};\r\n  cursor: ${selected ? \"auto\" : \"pointer\"};\r\n\r\n  &:hover {\r\n    border: 1px solid aquamarine;\r\n  }\r\n`\r\n);\r\n\r\nconst Button = styled.button`\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  padding: 0;\r\n  color: #bbbbbb;\r\n  transition: color 0.5s ease;\r\n  &:hover {\r\n    color: ${(props) => props.hoverColor || \"#000000\"};\r\n  }\r\n`;\r\n\r\nfunction Description({\r\n  description,\r\n  parentId,\r\n  selected,\r\n  updateInstance,\r\n  deleteInstance,\r\n  refetchQueries,\r\n  onSelect,\r\n}) {\r\n  const [descriptionValue, updateDescriptionValue] = useState(\r\n    description.value\r\n  );\r\n  const [isEditMode, updateIsEditMode] = useState(false);\r\n  const [isSaving, updateIsSaving] = useState(false);\r\n  const [isDeleteMode, updateIsDeleteMode] = useState(false);\r\n  const [isDeleting, updateIsDeleting] = useState(false);\r\n\r\n  if (!selected) {\r\n    return (\r\n      <DescriptionStyleWrapper onClick={() => onSelect(description.id)}>\r\n        {descriptionValue}\r\n      </DescriptionStyleWrapper>\r\n    );\r\n  }\r\n\r\n  function handleDescriptionValueChange(e) {\r\n    updateDescriptionValue(e.target.value);\r\n  }\r\n\r\n  async function handleDescriptionValueSave() {\r\n    updateIsSaving(true);\r\n\r\n    await updateInstance({\r\n      variables: {\r\n        actionId: UPDATE_DESCRIPTION_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          value: descriptionValue,\r\n          instanceId: description.id,\r\n        }),\r\n      },\r\n      refetchQueries,\r\n    });\r\n\r\n    updateIsEditMode(false);\r\n    updateIsSaving(false);\r\n  }\r\n\r\n  function handleCancelEdit() {\r\n    updateIsEditMode(false);\r\n  }\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <DescriptionStyleWrapper>\r\n        <EditInstanceForm\r\n          id={description.id}\r\n          label=\"Description Value:\"\r\n          value={descriptionValue}\r\n          onChange={handleDescriptionValueChange}\r\n          onSave={handleDescriptionValueSave}\r\n          onCancel={handleCancelEdit}\r\n          disabled={isSaving}\r\n        />\r\n      </DescriptionStyleWrapper>\r\n    );\r\n  }\r\n\r\n  async function handleDelete() {\r\n    updateIsDeleting(true);\r\n\r\n    try {\r\n      await deleteInstance({\r\n        variables: {\r\n          actionId: DELETE_DESCRIPTION_FOR_APP_SPEC_ACTION_ID,\r\n          executionParameters: JSON.stringify({\r\n            parentInstanceId: parentId,\r\n            instanceId: description.id,\r\n          }),\r\n        },\r\n        refetchQueries,\r\n      });\r\n    } catch (e) {\r\n      updateIsDeleting(false);\r\n    }\r\n  }\r\n\r\n  function handleCancelDelete() {\r\n    updateIsDeleteMode(false);\r\n  }\r\n\r\n  if (isDeleteMode) {\r\n    return (\r\n      <DescriptionStyleWrapper selected={selected} isDeleting={isDeleting}>\r\n        {descriptionValue}\r\n        <DeleteInstanceMenu\r\n          onDelete={handleDelete}\r\n          onCancel={handleCancelDelete}\r\n          disabled={isDeleting}\r\n        />\r\n      </DescriptionStyleWrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DescriptionStyleWrapper selected={selected}>\r\n      {descriptionValue}\r\n      <Button type=\"button\" onClick={() => updateIsEditMode(true)}>\r\n        &#9998;\r\n      </Button>\r\n      <Button type=\"button\" onClick={() => updateIsDeleteMode(true)}>\r\n        &#128465;\r\n      </Button>\r\n    </DescriptionStyleWrapper>\r\n  );\r\n}\r\n\r\nexport default compose(\r\n  graphql(EXECUTE_ACTION, { name: \"updateInstance\" }),\r\n  graphql(EXECUTE_ACTION, { name: \"deleteInstance\" })\r\n)(Description);\r\n","import React, { Component, createRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { v4 } from \"uuid\";\r\n\r\nimport DescriptionCreationForm from \"../DescriptionCreationForm\";\r\nimport Description from \"../Description\";\r\n\r\n// np__added_start unit: appSpec, comp: Descriptions, loc: styling\r\n\r\nconst DescriptionsStyleWrapper = styled.div``;\r\n\r\nconst Button = styled.button`\r\n  display: block;\r\n  margin: 0 auto;\r\n`;\r\n// np__added_end unit: appSpec, comp: Descriptions, loc: styling\r\n\r\nclass Descriptions extends Component {\r\n  state = {\r\n    selectedDescriptionId: null,\r\n  };\r\n\r\n  wrapperRef = createRef();\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"mousedown\", this.handleClick);\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    const node = this.wrapperRef.current;\r\n\r\n    if (node && node !== e.target && !node.contains(e.target)) {\r\n      this.setState({ selectedDescriptionId: null });\r\n    }\r\n  };\r\n\r\n  handleSelect = (id) => this.setState({ selectedDescriptionId: id });\r\n\r\n  render() {\r\n    const { appId, descriptions, refetchQueries, onUpdate } = this.props;\r\n    const { selectedDescriptionId } = this.state;\r\n\r\n    {\r\n      /* np__added_start unit: appSpec, comp: Descriptions, loc: renderBeginning */\r\n    }\r\n    {\r\n      /* np__added_end unit: appSpec, comp: Descriptions, loc: renderBeginning */\r\n    }\r\n\r\n    return (\r\n      <> </>\r\n      // <DescriptionsStyleWrapper\r\n      //   ref={this.wrapperRef}\r\n      //   onClick={this.handleClick}\r\n      // >\r\n      //   {descriptions.map((description) => (\r\n      //     <Description\r\n      //       key={v4()}\r\n      //       description={description}\r\n      //       selected={description.id === selectedDescriptionId}\r\n      //       onUpdate={onUpdate}\r\n      //       parentId={appId}\r\n      //       refetchQueries={refetchQueries}\r\n      //       onSelect={this.handleSelect}\r\n      //     />\r\n      //   ))}\r\n\r\n      //   <DescriptionCreationForm\r\n      //     parentId={appId}\r\n      //     refetchQueries={refetchQueries}\r\n      //   />\r\n      //   {/* np__added_start unit: appSpec, comp: Descriptions, loc: renderEnding */}\r\n      //   {/* np__added_end unit: appSpec, comp: Descriptions, loc: renderEnding */}\r\n      // </DescriptionsStyleWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Descriptions;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { EXECUTE_ACTION } from \"@nostack/no-stack\";\r\nimport compose from \"@shopify/react-compose\";\r\nimport { graphql } from \"@apollo/react-hoc\";\r\n\r\nimport {\r\n  UPDATE_APP_FOR_APP_SPEC_ACTION_ID,\r\n  DELETE_APP_FOR_APP_SPEC_ACTION_ID,\r\n  TYPE_USER_TYPE_ID,\r\n  TYPE_DESCRIPTION_ID,\r\n} from \"../../../config\";\r\n\r\nimport EditInstanceForm from \"../../EditInstanceForm\";\r\nimport DeleteInstanceMenu from \"../../DeleteInstanceMenu\";\r\n\r\nimport UserTypes from \"../UserTypes\";\r\nimport Descriptions from \"../Descriptions\";\r\n\r\n// add styling here\r\nconst div = styled.div(\r\n  ({ selected, isDeleting }) => `\r\n  margin: 2em 1em;\r\n  padding: 1.5em;\r\n  border: ${selected ? \"1px solid aquamarine\" : \"1px solid white\"};\r\n  border-radius: 10px;\r\n  box-shadow: 5px 5px 10px #888888;\r\n  background-color: ${isDeleting && \"tomato\"};\r\n  cursor: ${selected ? \"auto\" : \"pointer\"};\r\n\r\n  &:hover {\r\n    border: 1px solid aquamarine;\r\n  }\r\n`\r\n);\r\n\r\nconst Button = styled.button`\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1.25rem;\r\n  padding: 0;\r\n  color: #bbbbbb;\r\n  transition: color 0.5s ease;\r\n  &:hover {\r\n    color: ${(props) => props.hoverColor || \"#000000\"};\r\n  }\r\n`;\r\n\r\nfunction App({\r\n  app,\r\n  parentId,\r\n  selected,\r\n  updateInstance,\r\n  deleteInstance,\r\n  refetchQueries,\r\n  onSelect,\r\n}) {\r\n  const [appValue, updateAppValue] = useState(app.value);\r\n  const [isEditMode, updateIsEditMode] = useState(false);\r\n  const [isSaving, updateIsSaving] = useState(false);\r\n  const [isDeleteMode, updateIsDeleteMode] = useState(false);\r\n  const [isDeleting, updateIsDeleting] = useState(false);\r\n\r\n  const userTypeData =\r\n    app.children &&\r\n    app.children.find((child) => child.typeId === TYPE_USER_TYPE_ID);\r\n  const userTypes = userTypeData ? userTypeData.instances : [];\r\n  const descriptionData =\r\n    app.children &&\r\n    app.children.find((child) => child.typeId === TYPE_DESCRIPTION_ID);\r\n  const descriptions = descriptionData ? descriptionData.instances : [];\r\n\r\n  // if (!selected) {\r\n  //   return (\r\n  //     <div onClick={() => onSelect(app.id)}>\r\n  //       {appValue}\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  function handleAppValueChange(e) {\r\n    updateAppValue(e.target.value);\r\n  }\r\n\r\n  async function handleAppValueSave() {\r\n    updateIsSaving(true);\r\n\r\n    await updateInstance({\r\n      variables: {\r\n        actionId: UPDATE_APP_FOR_APP_SPEC_ACTION_ID,\r\n        executionParameters: JSON.stringify({\r\n          value: appValue,\r\n          instanceId: app.id,\r\n        }),\r\n      },\r\n      refetchQueries,\r\n    });\r\n\r\n    updateIsEditMode(false);\r\n    updateIsSaving(false);\r\n  }\r\n\r\n  function handleCancelEdit() {\r\n    updateIsEditMode(false);\r\n  }\r\n\r\n  if (isEditMode) {\r\n    return (\r\n      <div>\r\n        <EditInstanceForm\r\n          id={app.id}\r\n          label=\"App Value:\"\r\n          value={appValue}\r\n          onChange={handleAppValueChange}\r\n          onSave={handleAppValueSave}\r\n          onCancel={handleCancelEdit}\r\n          disabled={isSaving}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async function handleDelete() {\r\n    updateIsDeleting(true);\r\n\r\n    try {\r\n      await deleteInstance({\r\n        variables: {\r\n          actionId: DELETE_APP_FOR_APP_SPEC_ACTION_ID,\r\n          executionParameters: JSON.stringify({\r\n            parentInstanceId: parentId,\r\n            instanceId: app.id,\r\n          }),\r\n        },\r\n        refetchQueries,\r\n      });\r\n    } catch (e) {\r\n      updateIsDeleting(false);\r\n    }\r\n  }\r\n\r\n  function handleCancelDelete() {\r\n    updateIsDeleteMode(false);\r\n  }\r\n\r\n  if (isDeleteMode) {\r\n    return (\r\n      <div selected={selected} isDeleting={isDeleting}>\r\n        {appValue}\r\n        <DeleteInstanceMenu\r\n          onDelete={handleDelete}\r\n          onCancel={handleCancelDelete}\r\n          disabled={isDeleting}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div selected={selected} class=\"box\" style={{ minWidth: \"550px\" }}>\r\n      <div class=\"flex justify-between\">\r\n        <strong> {appValue} </strong>\r\n        <div> Description </div>\r\n      </div>\r\n      <Button type=\"button\" onClick={() => updateIsEditMode(true)}>\r\n        &#9998;\r\n      </Button>\r\n      <Button type=\"button\" onClick={() => updateIsDeleteMode(true)}>\r\n        &#128465;\r\n      </Button>\r\n\r\n      <UserTypes\r\n        userTypes={userTypes}\r\n        appId={app.id}\r\n        label=\"UserType?\"\r\n        refetchQueries={refetchQueries}\r\n      />\r\n      <Descriptions\r\n        descriptions={descriptions}\r\n        appId={app.id}\r\n        label=\"Description?\"\r\n        refetchQueries={refetchQueries}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default compose(\r\n  graphql(EXECUTE_ACTION, { name: \"updateInstance\" }),\r\n  graphql(EXECUTE_ACTION, { name: \"deleteInstance\" })\r\n)(App);\r\n"],"sourceRoot":""}